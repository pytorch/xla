version: 2.1

update_submodule: &update_submodule
  name: Update Submodule
  command: |
    git submodule sync
    git submodule update --recursive --init

setup_base_docker: &setup_base_docker
  name: Setup Base Docker Image
  command: .circleci/setup_ci_environment.sh

launch_docker_and_build: &launch_docker_and_build
  name: Launch Docker Container and Build
  no_output_timeout: "1h"
  command: |
    set -e
    eval $(aws ecr get-login --region us-east-1 --no-include-email)
    time docker pull ${DOCKER_IMAGE} >/dev/null
    sudo pkill -SIGHUP dockerd
    echo "declare -x SCCACHE_BUCKET=${SCCACHE_BUCKET}" >> /home/circleci/project/env
    echo "declare -x AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_SCCACHE_AND_XLA_BAZEL_S3_BUCKET_V1}" >> /home/circleci/project/env
    echo "declare -x AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_SCCACHE_AND_XLA_BAZEL_S3_BUCKET_V1}" >> /home/circleci/project/env
    echo "declare -x XLA_CLANG_CACHE_S3_BUCKET_NAME=${XLA_CLANG_CACHE_S3_BUCKET_NAME}" >> /home/circleci/project/env
    echo "declare -x CIRCLE_JOB=${CIRCLE_JOB}" >> /home/circleci/project/env
    echo "declare -x MAX_JOBS=8" >> /home/circleci/project/env
    echo "declare -x CC=clang-9 CXX=clang++-9" >> /home/circleci/project/xla_env
    echo "declare -x XLA_USE_XRT=1" >> /home/circleci/project/xla_env
    echo "declare -x XLA_CUDA=1" >> /home/circleci/project/xla_env
    echo "declare -x USE_CUDA=0" >> /home/circleci/project/env
    echo "declare -x GITHUB_TORCH_XLA_BOT_TOKEN=${GITHUB_TORCH_XLA_BOT_TOKEN}" >> /home/circleci/project/xla_env
    echo "declare -x CIRCLE_PULL_REQUEST=${CIRCLE_PULL_REQUEST}" >> /home/circleci/project/env
    echo "declare -x CIRCLE_PROJECT_USERNAME=${CIRCLE_PROJECT_USERNAME}" >> /home/circleci/project/env
    echo "declare -x CIRCLE_PROJECT_REPONAME=${CIRCLE_PROJECT_REPONAME}" >> /home/circleci/project/env

    pid=$(docker run -t -d -w $WORKDIR ${DOCKER_IMAGE})
    docker cp /home/circleci/project/. "$pid:$WORKDIR"
    docker exec -u jenkins ${pid} sudo chown -R jenkins ${WORKDIR}
    echo ${pid} > .docker_pid

    # Build
    docker exec -u jenkins $(cat .docker_pid) .circleci/build.sh

    # Push built docker image
    output_image=${DOCKER_IMAGE}-${CIRCLE_SHA1}
    export COMMIT_DOCKER_IMAGE=$output_image-xla
    docker commit "$pid" ${COMMIT_DOCKER_IMAGE}
    time docker push ${COMMIT_DOCKER_IMAGE}

download_docker: &download_docker
  name: Download Docker Container
  no_output_timeout: "1h"
  command: |
    set -e
    output_image=${DOCKER_IMAGE}-${CIRCLE_SHA1}
    export COMMIT_DOCKER_IMAGE=$output_image-xla
    echo "DOCKER_IMAGE: "${COMMIT_DOCKER_IMAGE}

    sudo pip install awscli==1.16.35 -qqq
    eval $(aws ecr get-login --region us-east-1 --no-include-email)
    time docker pull ${COMMIT_DOCKER_IMAGE} >/dev/null
    if [ -n "${USE_CUDA_DOCKER_RUNTIME:-}" ]; then
      pid=$(docker run --runtime=nvidia -t -d -w $WORKDIR ${COMMIT_DOCKER_IMAGE})
    else
      pid=$(docker run -t -d -w $WORKDIR ${COMMIT_DOCKER_IMAGE})
    fi
    echo ${pid} > .docker_pid

calculate_docker_image: &calculate_docker_image
  name: Calculate docker image
  command: |
    git clone --quiet https://github.com/pytorch/pytorch.git "/tmp/pytorch"
    # Just a quick smoke test to see if we can actually extract the tag
    git -C /tmp/pytorch rev-parse HEAD:.circleci/docker
    DOCKER_TAG=$(git -C /tmp/pytorch rev-parse HEAD:.circleci/docker)
    echo "declare -x DOCKER_IMAGE=308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-bionic-cuda10.2-cudnn7-py3.6-clang9:${DOCKER_TAG}" >> "${BASH_ENV}"

run_build: &run_build
  resource_class: xlarge
  machine:
    image: ubuntu-1604:201903-01
  steps:
  - checkout
  - run:
      <<: *update_submodule
  - run:
      <<: *setup_base_docker
  - run:
      <<: *calculate_docker_image
  - run:
      <<: *launch_docker_and_build

run_test: &run_test
  machine:
    image: ubuntu-1604:201903-01
  steps:
  - checkout
  - run:
      <<: *update_submodule
  - run:
      <<: *setup_base_docker
  - run:
      <<: *calculate_docker_image
  - run:
      <<: *download_docker
  - run:
      name: Test
      no_output_timeout: "1h"
      command: |
        docker exec -u jenkins $(cat .docker_pid) .circleci/test.sh

run_test_and_push_doc: &run_test_and_push_doc
  machine:
    image: ubuntu-1604:201903-01
  steps:
  - checkout
  - run:
      <<: *update_submodule
  - run:
      <<: *setup_base_docker
  - run:
      <<: *calculate_docker_image
  - run:
      <<: *download_docker
  - run:
      name: Test
      no_output_timeout: "1h"
      command: |
        docker exec -u jenkins $(cat .docker_pid) .circleci/test.sh
  - run:
      name: Push doc to public
      no_output_timeout: "1h"
      command: |
        docker exec -u jenkins $(cat .docker_pid) .circleci/doc_push.sh


run_clang_format: &run_clang_format
  name: Run clang-format
  command: |
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
    sudo add-apt-repository 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
    sudo apt-get update
    sudo apt install -y clang-format-7
    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "Checkout code is not clean"
      echo "${git_status}"
      exit 1
    fi

    find -name '*.cpp' -o -name '*.h' | xargs clang-format-7 -i -style=file
    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "clang-format-7 is not happy, please run `clang-format-7 -i -style /PATH/TO/foo.cpp` to the following files"
      echo "${git_status}"
      exit 1
    else
      echo "PASSED C++ format"
    fi

run_yapf: &run_yapf
  name: Run yapf
  command: |
    pyenv global 3.7.0
    pip install --upgrade pip
    pip install yapf==0.30.0

    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "Checkout code is not clean"
      echo "${git_status}"
      exit 1
    fi

    yapf -i -r *.py test/ scripts/ torch_xla/
    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "yapf is not happy, please run `yapf -i /PATH/TO/foo.py` to the following files"
      echo "${git_status}"
      exit 1
    else
      echo "PASSED Python format"
    fi

assert_no_torch_pin: &assert_no_torch_pin
  name: Make sure torch_patches/.torch_pin is removed before merging
  command: |
      TORCH_PIN=./torch_patches/.torch_pin
      if [[ -f "${TORCH_PIN}" ]]; then
        echo "Please remove ${TORCH_PIN} before landing."
        exit 1
      else
        echo "No ${TORCH_PIN} found, safe to land..."
      fi

ci_params: &ci_params
  parameters:
    resource_class:
      type: string
      default: "large"
    use_cuda_docker_runtime:
      type: string
      default: ""
  environment:
    USE_CUDA_DOCKER_RUNTIME: << parameters.use_cuda_docker_runtime >>
  resource_class: << parameters.resource_class >>

jobs:
  linter_check:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run:
        <<: *run_clang_format
    - run:
        <<: *run_yapf

  linter_check_no_torch_pin:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run:
        <<: *assert_no_torch_pin
    - run:
        <<: *run_clang_format
    - run:
        <<: *run_yapf

  pytorch_xla_linux_bionic_py3_6_clang9_build:
    <<: *run_build

  pytorch_xla_linux_bionic_py3_6_clang9_test:
    <<: *ci_params
    <<: *run_test

  pytorch_xla_linux_bionic_py3_6_clang9_test_and_push_doc:
    <<: *ci_params
    <<: *run_test_and_push_doc

workflows:
  version: 2
  build:
    jobs:
      - linter_check:
          filters:
            branches:
              ignore:
                - master
                - /release\/.*/
      - linter_check_no_torch_pin:
          filters:
            branches:
              only:
                - master
                - /release\/.*/
      - pytorch_xla_linux_bionic_py3_6_clang9_build
      - pytorch_xla_linux_bionic_py3_6_clang9_test:
          name: pytorch_xla_linux_bionic_py3_6_clang9_CPU_test
          requires:
            - pytorch_xla_linux_bionic_py3_6_clang9_build
          filters:
            branches:
              ignore:
                - master
                - /release\/.*/
      - pytorch_xla_linux_bionic_py3_6_clang9_test:
          name: pytorch_xla_linux_bionic_py3_6_clang9_GPU_test
          resource_class: gpu.medium
          use_cuda_docker_runtime: "1"
          requires:
            - pytorch_xla_linux_bionic_py3_6_clang9_build
      - pytorch_xla_linux_bionic_py3_6_clang9_test_and_push_doc:
          name: pytorch_xla_linux_bionic_py3_6_clang9_CPU_test_and_push_doc
          requires:
            - pytorch_xla_linux_bionic_py3_6_clang9_build
          filters:
            branches:
              only:
                - master
                - /release\/.*/
