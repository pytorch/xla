version: 2

update_submodule: &update_submodule
  name: Update Submodule
  command: |
    git submodule sync
    git submodule update --recursive --init

linux_default: &linux_default
  resource_class: large
  machine:
    image: default
  steps:
  - checkout
  - run:
      <<: *update_submodule
  - run:
      name: Launch Docker Container
      no_output_timeout: "1h"
      command: |
        set -e
        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_FOR_ECR_READ_WRITE}
        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY_FOR_ECR_READ_WRITE}
        sudo pip install awscli==1.16.35 -qqq
        eval $(aws ecr get-login --region us-east-1 --no-include-email)
        docker pull ${DOCKER_IMAGE}
        sudo pkill -SIGHUP dockerd
        WORKDIR=/var/lib/jenkins/workspace
        echo "declare -x SCCACHE_BUCKET=${SCCACHE_BUCKET}" >> /home/circleci/project/env
        echo "declare -x AWS_ACCESS_KEY_ID=${CIRCLECI_AWS_ACCESS_KEY_FOR_SCCACHE_AND_XLA_BAZEL_S3_BUCKET_V1}" >> /home/circleci/project/env
        echo "declare -x AWS_SECRET_ACCESS_KEY=${CIRCLECI_AWS_SECRET_KEY_FOR_SCCACHE_AND_XLA_BAZEL_S3_BUCKET_V1}" >> /home/circleci/project/env
        echo "declare -x XLA_CLANG_CACHE_S3_BUCKET_NAME=${XLA_CLANG_CACHE_S3_BUCKET_NAME}" >> /home/circleci/project/env
        echo "declare -x CIRCLE_JOB=${CIRCLE_JOB}" >> /home/circleci/project/env
        echo "declare -x MAX_JOBS=8" >> /home/circleci/project/env
        echo "declare -x CC=clang-8 CXX=clang++-8" >> /home/circleci/project/xla_env
        echo "declare -x XLA_USE_XRT=1" >> /home/circleci/project/xla_env
        echo "declare -x XRT_DEVICE_MAP=\"CPU:0;/job:localservice/replica:0/task:0/device:XLA_CPU:0\"" >> /home/circleci/project/xla_env
        echo "declare -x export XRT_WORKERS=\"localservice:0;grpc://localhost:40934\"" >> /home/circleci/project/xla_env

        pid=$(docker run -t -d -w $WORKDIR ${DOCKER_IMAGE})
        docker cp /home/circleci/project/. "$pid:$WORKDIR"
        docker exec -u jenkins ${pid} sudo chown -R jenkins ${WORKDIR}
        echo ${pid} > .docker_pid
  - run:
      name: Build
      no_output_timeout: "1h"
      command: |
        docker exec -u jenkins $(cat .docker_pid) .circleci/build.sh
  - run:
      name: Test
      no_output_timeout: "1h"
      command: |
        docker exec -u jenkins $(cat .docker_pid) .circleci/test.sh

run_clang_format: &run_clang_format
  name: Run clang-format
  command: |
    wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
    sudo add-apt-repository 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-7 main'
    sudo apt-get update
    sudo apt install -y clang-format-7
    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "Checkout code is not clean"
      echo "${git_status}"
      exit 1
    fi

    find -name '*.cpp' -o -name '*.h' | xargs clang-format-7 -i -style=file
    git_status=$(git status --porcelain)
    if [[ $git_status ]]; then
      echo "clang-format-7 is not happy, please run `clang-format-7 -i -style /PATH/TO/foo.cpp` to the following files"
      echo "${git_status}"
      exit 1
    else
      echo "PASSED"
    fi

jobs:
  linter_check:
    machine:
      image: ubuntu-1604:201903-01
    steps:
    - checkout
    - run:
        <<: *run_clang_format

  pytorch_xla_linux_xenial_py3_6_clang_7:
    environment:
      DOCKER_IMAGE: "308535385114.dkr.ecr.us-east-1.amazonaws.com/pytorch/pytorch-linux-xenial-py3.6-clang7:347"
    <<: *linux_default

workflows:
  version: 2
  build:
    jobs:
      - linter_check
      - pytorch_xla_linux_xenial_py3_6_clang_7
