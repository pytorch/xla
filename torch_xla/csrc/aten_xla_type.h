#pragma once
// Autogenerated file by gen_backend_stubs.py. Do not edit directly!

#include <ATen/Tensor.h>

namespace torch_xla {
at::Tensor cos(const at::Tensor &self);
at::Tensor &t_(at::Tensor &self);
at::Tensor l1_loss_backward(const at::Tensor &grad_output,
                            const at::Tensor &self, const at::Tensor &target,
                            int64_t reduction);
at::Tensor empty_strided(at::IntArrayRef size, at::IntArrayRef stride,
                         c10::optional<at::ScalarType> dtype,
                         c10::optional<at::Layout> layout,
                         c10::optional<at::Device> device,
                         c10::optional<bool> pin_memory);
at::Tensor view(const at::Tensor &self, at::IntArrayRef size);
at::Tensor __lshift__(const at::Tensor &self, const at::Tensor &other);
at::Tensor max_pool3d_with_indices_backward(
    const at::Tensor &grad_output, const at::Tensor &self,
    at::IntArrayRef kernel_size, at::IntArrayRef stride,
    at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
    const at::Tensor &indices);
at::Tensor eq(const at::Tensor &self, const at::Tensor &other);
at::Tensor diagonal(const at::Tensor &self, int64_t offset, int64_t dim1,
                    int64_t dim2);
at::Tensor _unsafe_view(const at::Tensor &self, at::IntArrayRef size);
at::Tensor &exponential_(at::Tensor &self, double lambd,
                         c10::optional<at::Generator> generator);
at::Tensor &atan_(at::Tensor &self);
at::Tensor &log_(at::Tensor &self);
at::Tensor log10(const at::Tensor &self);
at::Tensor &random_(at::Tensor &self, int64_t to,
                    c10::optional<at::Generator> generator);
at::Tensor gather(const at::Tensor &self, int64_t dim, const at::Tensor &index,
                  bool sparse_grad);
at::Tensor std(const at::Tensor &self, c10::optional<at::IntArrayRef> dim,
               c10::optional<int64_t> correction, bool keepdim);
std::tuple<at::Tensor, at::Tensor> triangular_solve(const at::Tensor &self,
                                                    const at::Tensor &A,
                                                    bool upper, bool transpose,
                                                    bool unitriangular);
at::Tensor add(const at::Tensor &self, const at::Tensor &other,
               const at::Scalar &alpha);
at::Tensor &atanh_(at::Tensor &self);
at::Tensor &tan_(at::Tensor &self);
at::Tensor _log_softmax(const at::Tensor &self, int64_t dim,
                        bool half_to_float);
at::Tensor mse_loss_backward(const at::Tensor &grad_output,
                             const at::Tensor &self, const at::Tensor &target,
                             int64_t reduction);
at::Tensor round(const at::Tensor &self);
at::Tensor sign(const at::Tensor &self);
at::Tensor upsample_nearest2d_backward(const at::Tensor &grad_output,
                                       at::IntArrayRef output_size,
                                       at::IntArrayRef input_size,
                                       c10::optional<double> scales_h,
                                       c10::optional<double> scales_w);
at::Tensor floor(const at::Tensor &self);
at::Tensor convolution_overrideable(
    const at::Tensor &input, const at::Tensor &weight,
    const c10::optional<at::Tensor> &bias, at::IntArrayRef stride,
    at::IntArrayRef padding, at::IntArrayRef dilation, bool transposed,
    at::IntArrayRef output_padding, int64_t groups);
at::Tensor &tanh_(at::Tensor &self);
at::Tensor &leaky_relu_(at::Tensor &self, const at::Scalar &negative_slope);
at::Tensor &sin_(at::Tensor &self);
at::Tensor ge(const at::Tensor &self, const at::Tensor &other);
at::Tensor rsqrt(const at::Tensor &self);
std::tuple<at::Tensor, at::Tensor> topk(const at::Tensor &self, int64_t k,
                                        int64_t dim, bool largest, bool sorted);
at::Tensor &div_(at::Tensor &self, const at::Scalar &other);
at::Tensor embedding(const at::Tensor &weight, const at::Tensor &indices,
                     int64_t padding_idx, bool scale_grad_by_freq, bool sparse);
at::Tensor &masked_fill_(at::Tensor &self, const at::Tensor &mask,
                         const at::Tensor &value);
at::Tensor &frac_(at::Tensor &self);
at::Tensor softplus(const at::Tensor &self, const at::Scalar &beta,
                    const at::Scalar &threshold);
at::Tensor rsub(const at::Tensor &self, const at::Tensor &other,
                const at::Scalar &alpha);
at::Tensor std(const at::Tensor &self, at::IntArrayRef dim, bool unbiased,
               bool keepdim);
std::tuple<at::Tensor &, at::Tensor &> min_out(const at::Tensor &self,
                                               int64_t dim, bool keepdim,
                                               at::Tensor &min,
                                               at::Tensor &min_indices);
at::Tensor sigmoid(const at::Tensor &self);
at::Tensor nll_loss2d_backward(const at::Tensor &grad_output,
                               const at::Tensor &self, const at::Tensor &target,
                               const c10::optional<at::Tensor> &weight,
                               int64_t reduction, int64_t ignore_index,
                               const at::Tensor &total_weight);
at::Tensor tanh_backward(const at::Tensor &grad_output,
                         const at::Tensor &output);
at::Tensor max_unpool2d(const at::Tensor &self, const at::Tensor &indices,
                        at::IntArrayRef output_size);
at::Tensor avg_pool2d_backward(const at::Tensor &grad_output,
                               const at::Tensor &self,
                               at::IntArrayRef kernel_size,
                               at::IntArrayRef stride, at::IntArrayRef padding,
                               bool ceil_mode, bool count_include_pad,
                               c10::optional<int64_t> divisor_override);
at::Tensor log1p(const at::Tensor &self);
at::Tensor &erf_(at::Tensor &self);
at::Tensor logsumexp(const at::Tensor &self, at::IntArrayRef dim, bool keepdim);
at::Tensor &__irshift__(at::Tensor &self, const at::Scalar &other);
at::Tensor logdet(const at::Tensor &self);
at::Tensor &sinh_(at::Tensor &self);
at::Tensor &threshold_(at::Tensor &self, const at::Scalar &threshold,
                       const at::Scalar &value);
at::Tensor &tril_(at::Tensor &self, int64_t diagonal);
at::Tensor var(const at::Tensor &self, c10::optional<at::IntArrayRef> dim,
               c10::optional<int64_t> correction, bool keepdim);
at::Tensor permute(const at::Tensor &self, at::IntArrayRef dims);
std::tuple<at::Tensor, at::Tensor, at::Tensor> svd(const at::Tensor &self,
                                                   bool some, bool compute_uv);
at::Tensor cosh(const at::Tensor &self);
at::Tensor norm(const at::Tensor &self, const c10::optional<at::Scalar> &p,
                at::IntArrayRef dim, bool keepdim);
at::Tensor hardshrink(const at::Tensor &self, const at::Scalar &lambd);
at::Tensor log2(const at::Tensor &self);
std::vector<at::Tensor> split_with_sizes(const at::Tensor &self,
                                         at::IntArrayRef split_sizes,
                                         int64_t dim);
at::Tensor &le_(at::Tensor &self, const at::Tensor &other);
at::Tensor sub(const at::Tensor &self, const at::Scalar &other,
               const at::Scalar &alpha);
at::Tensor exp(const at::Tensor &self);
at::Tensor diag(const at::Tensor &self, int64_t diagonal);
at::Tensor normal(const at::Tensor &mean, double std,
                  c10::optional<at::Generator> generator);
at::Tensor softshrink_backward(const at::Tensor &grad_output,
                               const at::Tensor &self, const at::Scalar &lambd);
at::Tensor gelu_backward(const at::Tensor &grad, const at::Tensor &self);
at::Tensor erf(const at::Tensor &self);
at::Tensor leaky_relu_backward(const at::Tensor &grad_output,
                               const at::Tensor &self,
                               const at::Scalar &negative_slope,
                               bool self_is_result);
at::Tensor &masked_fill_(at::Tensor &self, const at::Tensor &mask,
                         const at::Scalar &value);
std::vector<at::Tensor> split(const at::Tensor &self, int64_t split_size,
                              int64_t dim);
at::Tensor abs(const at::Tensor &self);
at::Tensor &baddbmm_(at::Tensor &self, const at::Tensor &batch1,
                     const at::Tensor &batch2, const at::Scalar &beta,
                     const at::Scalar &alpha);
at::Tensor index(const at::Tensor &self,
                 const c10::List<c10::optional<at::Tensor>> &indices);
at::Tensor &ge_(at::Tensor &self, const at::Tensor &other);
at::Tensor avg_pool3d_backward(const at::Tensor &grad_output,
                               const at::Tensor &self,
                               at::IntArrayRef kernel_size,
                               at::IntArrayRef stride, at::IntArrayRef padding,
                               bool ceil_mode, bool count_include_pad,
                               c10::optional<int64_t> divisor_override);
at::Tensor hardsigmoid_backward(const at::Tensor &grad_output,
                                const at::Tensor &self);
std::tuple<at::Tensor, at::Tensor> nll_loss_forward(
    const at::Tensor &self, const at::Tensor &target,
    const c10::optional<at::Tensor> &weight, int64_t reduction,
    int64_t ignore_index);
at::Tensor ne(const at::Tensor &self, const at::Scalar &other);
at::Tensor mul(const at::Tensor &self, const at::Scalar &other);
at::Tensor &mv_out(const at::Tensor &self, const at::Tensor &vec,
                   at::Tensor &out);
at::Tensor &div_(at::Tensor &self, const at::Tensor &other);
at::Tensor &triu_(at::Tensor &self, int64_t diagonal);
at::Tensor &arange_out(const at::Scalar &start, const at::Scalar &end,
                       const at::Scalar &step, at::Tensor &out);
at::Tensor hardshrink_backward(const at::Tensor &grad_out,
                               const at::Tensor &self, const at::Scalar &lambd);
at::Tensor &__irshift__(at::Tensor &self, const at::Tensor &other);
at::Tensor upsample_bilinear2d(const at::Tensor &self,
                               at::IntArrayRef output_size, bool align_corners,
                               c10::optional<double> scales_h,
                               c10::optional<double> scales_w);
at::Tensor baddbmm(const at::Tensor &self, const at::Tensor &batch1,
                   const at::Tensor &batch2, const at::Scalar &beta,
                   const at::Scalar &alpha);
const at::Tensor &resize_(const at::Tensor &self, at::IntArrayRef size,
                          c10::optional<at::MemoryFormat> memory_format);
at::Tensor &random_(at::Tensor &self, int64_t from, c10::optional<int64_t> to,
                    c10::optional<at::Generator> generator);
at::Tensor replication_pad1d(const at::Tensor &self, at::IntArrayRef padding);
at::Tensor &sigmoid_(at::Tensor &self);
at::Tensor _adaptive_avg_pool2d(const at::Tensor &self,
                                at::IntArrayRef output_size);
at::Tensor &sign_(at::Tensor &self);
at::Tensor &floor_(at::Tensor &self);
at::Tensor &bitwise_and_out(const at::Tensor &self, const at::Scalar &other,
                            at::Tensor &out);
at::Tensor addmm(const at::Tensor &self, const at::Tensor &mat1,
                 const at::Tensor &mat2, const at::Scalar &beta,
                 const at::Scalar &alpha);
at::Tensor softplus_backward(const at::Tensor &grad_output,
                             const at::Tensor &self, const at::Scalar &beta,
                             const at::Scalar &threshold,
                             const at::Tensor &output);
at::Tensor reflection_pad2d(const at::Tensor &self, at::IntArrayRef padding);
at::Tensor inverse(const at::Tensor &self);
at::Tensor &log2_(at::Tensor &self);
at::Scalar _local_scalar_dense(const at::Tensor &self);
std::vector<at::Tensor> _to_cpu(at::TensorList tensors);
at::Tensor fmod(const at::Tensor &self, const at::Tensor &other);
at::Tensor upsample_nearest2d(const at::Tensor &self,
                              at::IntArrayRef output_size,
                              c10::optional<double> scales_h,
                              c10::optional<double> scales_w);
at::Tensor minimum(const at::Tensor &self, const at::Tensor &other);
at::Tensor &gt_(at::Tensor &self, const at::Scalar &other);
std::tuple<at::Tensor, at::Tensor> _pack_padded_sequence(
    const at::Tensor &input, const at::Tensor &lengths, bool batch_first);
at::Tensor gt(const at::Tensor &self, const at::Scalar &other);
at::Tensor &ceil_(at::Tensor &self);
at::Tensor threshold(const at::Tensor &self, const at::Scalar &threshold,
                     const at::Scalar &value);
at::Tensor rsub(const at::Tensor &self, const at::Scalar &other,
                const at::Scalar &alpha);
at::Tensor sqrt(const at::Tensor &self);
at::Tensor &erfinv_(at::Tensor &self);
at::Tensor &gt_(at::Tensor &self, const at::Tensor &other);
at::Tensor &fmod_(at::Tensor &self, const at::Tensor &other);
at::Tensor &elu_(at::Tensor &self, const at::Scalar &alpha,
                 const at::Scalar &scale, const at::Scalar &input_scale);
std::tuple<at::Tensor, at::Tensor> kthvalue(const at::Tensor &self, int64_t k,
                                            int64_t dim, bool keepdim);
at::Tensor neg(const at::Tensor &self);
at::Tensor addcmul(const at::Tensor &self, const at::Tensor &tensor1,
                   const at::Tensor &tensor2, const at::Scalar &value);
at::Tensor &bitwise_or_out(const at::Tensor &self, const at::Scalar &other,
                           at::Tensor &out);
at::Tensor &mul_(at::Tensor &self, const at::Tensor &other);
at::Tensor frac(const at::Tensor &self);
at::Tensor tril(const at::Tensor &self, int64_t diagonal);
at::Tensor &clamp_min_out(const at::Tensor &self, const at::Tensor &min,
                          at::Tensor &out);
at::Tensor kl_div(const at::Tensor &self, const at::Tensor &target,
                  int64_t reduction, bool log_target);
at::Tensor as_strided(const at::Tensor &self, at::IntArrayRef size,
                      at::IntArrayRef stride,
                      c10::optional<int64_t> storage_offset);
std::tuple<at::Tensor, at::Tensor> sort(const at::Tensor &self, int64_t dim,
                                        bool descending);
at::Tensor softshrink(const at::Tensor &self, const at::Scalar &lambd);
at::Tensor empty(at::IntArrayRef size, c10::optional<at::ScalarType> dtype,
                 c10::optional<at::Layout> layout,
                 c10::optional<at::Device> device,
                 c10::optional<bool> pin_memory,
                 c10::optional<at::MemoryFormat> memory_format);
at::Tensor &bernoulli_(at::Tensor &self, double p,
                       c10::optional<at::Generator> generator);
at::Tensor flip(const at::Tensor &self, at::IntArrayRef dims);
at::Tensor &remainder_(at::Tensor &self, const at::Tensor &other);
at::Tensor &cos_(at::Tensor &self);
at::Tensor trunc(const at::Tensor &self);
at::Tensor remainder(const at::Tensor &self, const at::Tensor &other);
at::Tensor l1_loss(const at::Tensor &self, const at::Tensor &target,
                   int64_t reduction);
at::Tensor normal(const at::Tensor &mean, const at::Tensor &std,
                  c10::optional<at::Generator> generator);
at::Tensor &bitwise_xor_out(const at::Tensor &self, const at::Tensor &other,
                            at::Tensor &out);
at::Tensor cholesky(const at::Tensor &self, bool upper);
at::Tensor var(const at::Tensor &self, at::IntArrayRef dim, bool unbiased,
               bool keepdim);
std::tuple<at::Tensor, at::Tensor> min(const at::Tensor &self, int64_t dim,
                                       bool keepdim);
std::tuple<at::Tensor, at::Tensor, at::Tensor> native_batch_norm(
    const at::Tensor &input, const c10::optional<at::Tensor> &weight,
    const c10::optional<at::Tensor> &bias,
    const c10::optional<at::Tensor> &running_mean,
    const c10::optional<at::Tensor> &running_var, bool training,
    double momentum, double eps);
at::Tensor max_pool2d_with_indices_backward(
    const at::Tensor &grad_output, const at::Tensor &self,
    at::IntArrayRef kernel_size, at::IntArrayRef stride,
    at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode,
    const at::Tensor &indices);
at::Tensor &log1p_(at::Tensor &self);
at::Tensor &sub_(at::Tensor &self, const at::Tensor &other,
                 const at::Scalar &alpha);
void _amp_foreach_non_finite_check_and_unscale_(at::TensorList self,
                                                at::Tensor &found_inf,
                                                const at::Tensor &inv_scale);
at::Tensor replication_pad2d_backward(const at::Tensor &grad_output,
                                      const at::Tensor &self,
                                      at::IntArrayRef padding);
at::Tensor cumsum(const at::Tensor &self, int64_t dim,
                  c10::optional<at::ScalarType> dtype);
at::Tensor div(const at::Tensor &self, const at::Tensor &other,
               c10::optional<std::string> rounding_mode);
at::Tensor reflection_pad2d_backward(const at::Tensor &grad_output,
                                     const at::Tensor &self,
                                     at::IntArrayRef padding);
at::Tensor log_sigmoid_backward(const at::Tensor &grad_output,
                                const at::Tensor &self,
                                const at::Tensor &buffer);
at::Tensor atanh(const at::Tensor &self);
at::Tensor tanh(const at::Tensor &self);
at::Tensor &sub_(at::Tensor &self, const at::Scalar &other,
                 const at::Scalar &alpha);
std::tuple<at::Tensor &, at::Tensor &> max_out(const at::Tensor &self,
                                               int64_t dim, bool keepdim,
                                               at::Tensor &max,
                                               at::Tensor &max_values);
at::Tensor &eye_out(int64_t n, at::Tensor &out);
at::Tensor alias(const at::Tensor &self);
at::Tensor mul(const at::Tensor &self, const at::Tensor &other);
at::Tensor &exp_(at::Tensor &self);
at::Tensor &bitwise_or_out(const at::Tensor &self, const at::Tensor &other,
                           at::Tensor &out);
at::Tensor &bitwise_xor_out(const at::Tensor &self, const at::Scalar &other,
                            at::Tensor &out);
std::tuple<at::Tensor, at::Tensor> nll_loss2d_forward(
    const at::Tensor &self, const at::Tensor &target,
    const c10::optional<at::Tensor> &weight, int64_t reduction,
    int64_t ignore_index);
at::Tensor cat(at::TensorList tensors, int64_t dim);
at::Tensor slice(const at::Tensor &self, int64_t dim,
                 c10::optional<int64_t> start, c10::optional<int64_t> end,
                 int64_t step);
at::Tensor argmin(const at::Tensor &self, c10::optional<int64_t> dim,
                  bool keepdim);
std::tuple<at::Tensor, at::Tensor> log_sigmoid_forward(const at::Tensor &self);
at::Tensor remainder(const at::Tensor &self, const at::Scalar &other);
at::Tensor binary_cross_entropy(const at::Tensor &self,
                                const at::Tensor &target,
                                const c10::optional<at::Tensor> &weight,
                                int64_t reduction);
at::Tensor maximum(const at::Tensor &self, const at::Tensor &other);
at::Tensor _s_where(const at::Tensor &condition, const at::Tensor &self,
                    const at::Tensor &other);
at::Tensor max_unpool2d_backward(const at::Tensor &grad_output,
                                 const at::Tensor &self,
                                 const at::Tensor &indices,
                                 at::IntArrayRef output_size);
at::Tensor &scatter_add_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                         const at::Tensor &src);
at::Tensor dot(const at::Tensor &self, const at::Tensor &tensor);
at::Tensor norm(const at::Tensor &self, const c10::optional<at::Scalar> &p,
                at::IntArrayRef dim, bool keepdim, at::ScalarType dtype);
at::Tensor _softmax(const at::Tensor &self, int64_t dim, bool half_to_float);
at::Tensor sum(const at::Tensor &self, at::IntArrayRef dim, bool keepdim,
               c10::optional<at::ScalarType> dtype);
at::Tensor mse_loss(const at::Tensor &self, const at::Tensor &target,
                    int64_t reduction);
at::Tensor &bernoulli_(at::Tensor &self, const at::Tensor &p,
                       c10::optional<at::Generator> generator);
at::Tensor &fill_(at::Tensor &self, const at::Tensor &value);
at::Tensor &scatter_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                     const at::Scalar &value);
at::Tensor erfc(const at::Tensor &self);
at::Tensor mv(const at::Tensor &self, const at::Tensor &vec);
at::Tensor &trunc_(at::Tensor &self);
at::Tensor repeat(const at::Tensor &self, at::IntArrayRef repeats);
std::tuple<at::Tensor, at::Tensor> symeig(const at::Tensor &self,
                                          bool eigenvectors, bool upper);
at::Tensor hardsigmoid(const at::Tensor &self);
std::tuple<at::Tensor, at::Tensor> max_pool2d_with_indices(
    const at::Tensor &self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
    at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
at::Tensor pow(const at::Scalar &self, const at::Tensor &exponent);
at::Tensor &fmod_(at::Tensor &self, const at::Scalar &other);
at::Tensor unsqueeze(const at::Tensor &self, int64_t dim);
at::Tensor kl_div_backward(const at::Tensor &grad_output,
                           const at::Tensor &self, const at::Tensor &target,
                           int64_t reduction, bool log_target);
at::Tensor &remainder_(at::Tensor &self, const at::Scalar &other);
at::Tensor le(const at::Tensor &self, const at::Tensor &other);
std::vector<at::Tensor> unbind(const at::Tensor &self, int64_t dim);
at::Tensor t(const at::Tensor &self);
at::Tensor max_unpool3d(const at::Tensor &self, const at::Tensor &indices,
                        at::IntArrayRef output_size, at::IntArrayRef stride,
                        at::IntArrayRef padding);
at::Tensor &squeeze_(at::Tensor &self);
at::Tensor _copy_from(const at::Tensor &self, const at::Tensor &dst,
                      bool non_blocking);
at::Tensor binary_cross_entropy_with_logits(
    const at::Tensor &self, const at::Tensor &target,
    const c10::optional<at::Tensor> &weight,
    const c10::optional<at::Tensor> &pos_weight, int64_t reduction);
at::Tensor &ne_(at::Tensor &self, const at::Tensor &other);
at::Tensor &addcdiv_(at::Tensor &self, const at::Tensor &tensor1,
                     const at::Tensor &tensor2, const at::Scalar &value);
at::Tensor gt(const at::Tensor &self, const at::Tensor &other);
at::Tensor &bitwise_not_out(const at::Tensor &self, at::Tensor &out);
at::Tensor clone(const at::Tensor &self,
                 c10::optional<at::MemoryFormat> memory_format);
at::Tensor &pow_(at::Tensor &self, const at::Scalar &exponent);
at::Tensor clamp_max(const at::Tensor &self, const at::Scalar &max);
at::Tensor replication_pad2d(const at::Tensor &self, at::IntArrayRef padding);
at::Tensor index_select(const at::Tensor &self, int64_t dim,
                        const at::Tensor &index);
at::Tensor var(const at::Tensor &self, bool unbiased);
at::Tensor upsample_nearest2d_backward(
    const at::Tensor &grad_output, c10::optional<at::IntArrayRef> output_size,
    at::IntArrayRef input_size,
    c10::optional<at::ArrayRef<double>> scale_factors);
at::Tensor &fill_(at::Tensor &self, const at::Scalar &value);
at::Tensor smooth_l1_loss(const at::Tensor &self, const at::Tensor &target,
                          int64_t reduction, double beta);
at::Tensor any(const at::Tensor &self, int64_t dim, bool keepdim);
at::Tensor take(const at::Tensor &self, const at::Tensor &index);
at::Tensor select(const at::Tensor &self, int64_t dim, int64_t index);
at::Tensor atan(const at::Tensor &self);
at::Tensor &rsqrt_(at::Tensor &self);
at::Tensor le(const at::Tensor &self, const at::Scalar &other);
at::Tensor expm1(const at::Tensor &self);
at::Tensor all(const at::Tensor &self);
at::Tensor __rshift__(const at::Tensor &self, const at::Scalar &other);
at::Tensor embedding_dense_backward(const at::Tensor &grad_output,
                                    const at::Tensor &indices,
                                    int64_t num_weights, int64_t padding_idx,
                                    bool scale_grad_by_freq);
at::Tensor &unsqueeze_(at::Tensor &self, int64_t dim);
at::Tensor &lt_(at::Tensor &self, const at::Tensor &other);
at::Tensor &div_(at::Tensor &self, const at::Tensor &other,
                 c10::optional<std::string> rounding_mode);
at::Tensor rrelu_with_noise(const at::Tensor &self, const at::Tensor &noise,
                            const at::Scalar &lower, const at::Scalar &upper,
                            bool training,
                            c10::optional<at::Generator> generator);
std::tuple<at::Tensor, at::Tensor> max(const at::Tensor &self, int64_t dim,
                                       bool keepdim);
at::Tensor nll_loss_backward(const at::Tensor &grad_output,
                             const at::Tensor &self, const at::Tensor &target,
                             const c10::optional<at::Tensor> &weight,
                             int64_t reduction, int64_t ignore_index,
                             const at::Tensor &total_weight);
at::Tensor tan(const at::Tensor &self);
at::Tensor all(const at::Tensor &self, int64_t dim, bool keepdim);
std::tuple<at::Tensor, at::Tensor> qr(const at::Tensor &self, bool some);
at::Tensor &eq_(at::Tensor &self, const at::Scalar &other);
at::Tensor lt(const at::Tensor &self, const at::Tensor &other);
at::Tensor nonzero(const at::Tensor &self);
at::Tensor bernoulli(const at::Tensor &self,
                     c10::optional<at::Generator> generator);
at::Tensor add(const at::Tensor &self, const at::Scalar &other,
               const at::Scalar &alpha);
at::Tensor acosh(const at::Tensor &self);
at::Tensor &hardtanh_(at::Tensor &self, const at::Scalar &min_val,
                      const at::Scalar &max_val);
at::Tensor &asinh_(at::Tensor &self);
at::Tensor cross(const at::Tensor &self, const at::Tensor &other,
                 c10::optional<int64_t> dim);
at::Tensor sin(const at::Tensor &self);
at::Tensor ge(const at::Tensor &self, const at::Scalar &other);
at::Tensor &acosh_(at::Tensor &self);
at::Tensor &_index_put_impl_(
    at::Tensor &self, const c10::List<c10::optional<at::Tensor>> &indices,
    const at::Tensor &values, bool accumulate, bool unsafe);
at::Tensor elu_backward(const at::Tensor &grad_output, const at::Scalar &alpha,
                        const at::Scalar &scale, const at::Scalar &input_scale,
                        bool is_result, const at::Tensor &self_or_result);
at::Tensor __lshift__(const at::Tensor &self, const at::Scalar &other);
at::Tensor &__ilshift__(at::Tensor &self, const at::Scalar &other);
at::Tensor __rshift__(const at::Tensor &self, const at::Tensor &other);
at::Tensor max_unpool3d_backward(const at::Tensor &grad_output,
                                 const at::Tensor &self,
                                 const at::Tensor &indices,
                                 at::IntArrayRef output_size,
                                 at::IntArrayRef stride,
                                 at::IntArrayRef padding);
at::Tensor &le_(at::Tensor &self, const at::Scalar &other);
at::Tensor normal(double mean, const at::Tensor &std,
                  c10::optional<at::Generator> generator);
at::Tensor atan2(const at::Tensor &self, const at::Tensor &other);
at::Tensor masked_select(const at::Tensor &self, const at::Tensor &mask);
const at::Tensor &as_strided_(const at::Tensor &self, at::IntArrayRef size,
                              at::IntArrayRef stride,
                              c10::optional<int64_t> storage_offset);
at::Tensor sub(const at::Tensor &self, const at::Tensor &other,
               const at::Scalar &alpha);
at::Tensor upsample_nearest2d(
    const at::Tensor &input, c10::optional<at::IntArrayRef> output_size,
    c10::optional<at::ArrayRef<double>> scale_factors);
std::tuple<at::Tensor, at::Tensor, at::Tensor>
convolution_backward_overrideable(
    const at::Tensor &grad_output, const at::Tensor &input,
    const at::Tensor &weight, at::IntArrayRef stride, at::IntArrayRef padding,
    at::IntArrayRef dilation, bool transposed, at::IntArrayRef output_padding,
    int64_t groups, std::array<bool, 3> output_mask);
at::Tensor &atan2_(at::Tensor &self, const at::Tensor &other);
at::Tensor bmm(const at::Tensor &self, const at::Tensor &mat2);
at::Tensor hardtanh(const at::Tensor &self, const at::Scalar &min_val,
                    const at::Scalar &max_val);
at::Tensor &asin_(at::Tensor &self);
at::Tensor argmax(const at::Tensor &self, c10::optional<int64_t> dim,
                  bool keepdim);
at::Tensor &eye_out(int64_t n, int64_t m, at::Tensor &out);
at::Tensor div(const at::Tensor &self, const at::Scalar &other);
at::Tensor addcdiv(const at::Tensor &self, const at::Tensor &tensor1,
                   const at::Tensor &tensor2, const at::Scalar &value);
at::Tensor min(const at::Tensor &self);
at::Tensor smooth_l1_loss_backward(const at::Tensor &grad_output,
                                   const at::Tensor &self,
                                   const at::Tensor &target, int64_t reduction,
                                   double beta);
at::Tensor ger(const at::Tensor &self, const at::Tensor &vec2);
at::Tensor stack(at::TensorList tensors, int64_t dim);
at::Tensor triu(const at::Tensor &self, int64_t diagonal);
at::Tensor &neg_(at::Tensor &self);
at::Tensor &addcmul_(at::Tensor &self, const at::Tensor &tensor1,
                     const at::Tensor &tensor2, const at::Scalar &value);
at::Tensor rrelu_with_noise_backward(const at::Tensor &grad_output,
                                     const at::Tensor &self,
                                     const at::Tensor &noise,
                                     const at::Scalar &lower,
                                     const at::Scalar &upper, bool training,
                                     bool self_is_result);
at::Tensor sum(const at::Tensor &self, c10::optional<at::ScalarType> dtype);
at::Tensor &random_(at::Tensor &self, c10::optional<at::Generator> generator);
at::Tensor &add_(at::Tensor &self, const at::Scalar &other,
                 const at::Scalar &alpha);
at::Tensor gelu(const at::Tensor &self);
at::Tensor &zero_(at::Tensor &self);
at::Tensor clamp_min(const at::Tensor &self, const at::Scalar &min);
at::Tensor &uniform_(at::Tensor &self, double from, double to,
                     c10::optional<at::Generator> generator);
at::Tensor avg_pool3d(const at::Tensor &self, at::IntArrayRef kernel_size,
                      at::IntArrayRef stride, at::IntArrayRef padding,
                      bool ceil_mode, bool count_include_pad,
                      c10::optional<int64_t> divisor_override);
at::Tensor &bitwise_and_out(const at::Tensor &self, const at::Tensor &other,
                            at::Tensor &out);
at::Tensor _adaptive_avg_pool3d(const at::Tensor &self,
                                at::IntArrayRef output_size);
at::Tensor _adaptive_avg_pool2d_backward(const at::Tensor &grad_output,
                                         const at::Tensor &self);
at::Tensor &clamp_max_out(const at::Tensor &self, const at::Tensor &max,
                          at::Tensor &out);
at::Tensor &masked_scatter_(at::Tensor &self, const at::Tensor &mask,
                            const at::Tensor &source);
at::Tensor &clamp_max_(at::Tensor &self, const at::Scalar &max);
at::Tensor cumprod(const at::Tensor &self, int64_t dim,
                   c10::optional<at::ScalarType> dtype);
at::Tensor avg_pool2d(const at::Tensor &self, at::IntArrayRef kernel_size,
                      at::IntArrayRef stride, at::IntArrayRef padding,
                      bool ceil_mode, bool count_include_pad,
                      c10::optional<int64_t> divisor_override);
at::Tensor binary_cross_entropy_backward(
    const at::Tensor &grad_output, const at::Tensor &self,
    const at::Tensor &target, const c10::optional<at::Tensor> &weight,
    int64_t reduction);
at::Tensor norm(const at::Tensor &self, const at::Scalar &p);
at::Tensor transpose(const at::Tensor &self, int64_t dim0, int64_t dim1);
at::Tensor mm(const at::Tensor &self, const at::Tensor &mat2);
at::Tensor &pow_(at::Tensor &self, const at::Tensor &exponent);
at::Tensor acos(const at::Tensor &self);
at::Tensor sinh(const at::Tensor &self);
std::tuple<at::Tensor, at::Tensor, at::Tensor> native_batch_norm_backward(
    const at::Tensor &grad_out, const at::Tensor &input,
    const c10::optional<at::Tensor> &weight,
    const c10::optional<at::Tensor> &running_mean,
    const c10::optional<at::Tensor> &running_var,
    const c10::optional<at::Tensor> &save_mean,
    const c10::optional<at::Tensor> &save_invstd, bool train, double eps,
    std::array<bool, 3> output_mask);
at::Tensor mean(const at::Tensor &self, c10::optional<at::ScalarType> dtype);
at::Tensor &__ilshift__(at::Tensor &self, const at::Tensor &other);
at::Tensor &erfc_(at::Tensor &self);
at::Tensor pow(const at::Tensor &self, const at::Tensor &exponent);
at::Tensor &sqrt_(at::Tensor &self);
at::Tensor &silu_out(const at::Tensor &self, at::Tensor &out);
at::Tensor &acos_(at::Tensor &self);
at::Tensor &lt_(at::Tensor &self, const at::Scalar &other);
at::Tensor _softmax_backward_data(const at::Tensor &grad_output,
                                  const at::Tensor &output, int64_t dim,
                                  const at::Tensor &self);
at::Tensor &clamp_min_(at::Tensor &self, const at::Scalar &min);
at::Tensor trace(const at::Tensor &self);
at::Tensor reciprocal(const at::Tensor &self);
at::Tensor _trilinear(const at::Tensor &i1, const at::Tensor &i2,
                      const at::Tensor &i3, at::IntArrayRef expand1,
                      at::IntArrayRef expand2, at::IntArrayRef expand3,
                      at::IntArrayRef sumdim, int64_t unroll_dim);
at::Tensor upsample_bilinear2d_backward(const at::Tensor &grad_output,
                                        at::IntArrayRef output_size,
                                        at::IntArrayRef input_size,
                                        bool align_corners,
                                        c10::optional<double> scales_h,
                                        c10::optional<double> scales_w);
at::Tensor prod(const at::Tensor &self, c10::optional<at::ScalarType> dtype);
at::Tensor hardtanh_backward(const at::Tensor &grad_output,
                             const at::Tensor &self, const at::Scalar &min_val,
                             const at::Scalar &max_val);
at::Tensor div(const at::Tensor &self, const at::Tensor &other);
at::Tensor &_amp_update_scale_(at::Tensor &self, at::Tensor &growth_tracker,
                               const at::Tensor &found_inf,
                               double scale_growth_factor,
                               double scale_backoff_factor,
                               int64_t growth_interval);
at::Tensor norm(const at::Tensor &self, const c10::optional<at::Scalar> &p,
                at::ScalarType dtype);
at::Tensor replication_pad1d_backward(const at::Tensor &grad_output,
                                      const at::Tensor &self,
                                      at::IntArrayRef padding);
at::Tensor &round_(at::Tensor &self);
at::Tensor asin(const at::Tensor &self);
at::Tensor clamp(const at::Tensor &self, const c10::optional<at::Tensor> &min,
                 const c10::optional<at::Tensor> &max);
at::Tensor &expm1_(at::Tensor &self);
at::Tensor relu(const at::Tensor &self);
at::Tensor leaky_relu(const at::Tensor &self, const at::Scalar &negative_slope);
at::Tensor ceil(const at::Tensor &self);
at::Tensor &normal_(at::Tensor &self, double mean, double std,
                    c10::optional<at::Generator> generator);
at::Tensor &index_fill_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                        const at::Tensor &value);
at::Tensor &index_fill_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                        const at::Scalar &value);
at::Tensor expand(const at::Tensor &self, at::IntArrayRef size, bool implicit);
at::Tensor &ge_(at::Tensor &self, const at::Scalar &other);
at::Tensor &ne_(at::Tensor &self, const at::Scalar &other);
at::Tensor &mul_(at::Tensor &self, const at::Scalar &other);
at::Tensor mean(const at::Tensor &self, at::IntArrayRef dim, bool keepdim,
                c10::optional<at::ScalarType> dtype);
at::Tensor &index_put_(at::Tensor &self,
                       const c10::List<c10::optional<at::Tensor>> &indices,
                       const at::Tensor &values, bool accumulate);
at::Tensor &squeeze_(at::Tensor &self, int64_t dim);
at::Tensor constant_pad_nd(const at::Tensor &self, at::IntArrayRef pad,
                           const at::Scalar &value);
at::Tensor sigmoid_backward(const at::Tensor &grad_output,
                            const at::Tensor &output);
at::Tensor ne(const at::Tensor &self, const at::Tensor &other);
at::Tensor &cosh_(at::Tensor &self);
at::Tensor lt(const at::Tensor &self, const at::Scalar &other);
at::Tensor _copy_from_and_resize(const at::Tensor &self, const at::Tensor &dst);
at::Tensor threshold_backward(const at::Tensor &grad_output,
                              const at::Tensor &self,
                              const at::Scalar &threshold);
at::Tensor &clamp_(at::Tensor &self, const c10::optional<at::Scalar> &min,
                   const c10::optional<at::Scalar> &max);
at::Tensor asinh(const at::Tensor &self);
at::Tensor clamp(const at::Tensor &self, const c10::optional<at::Scalar> &min,
                 const c10::optional<at::Scalar> &max);
at::Tensor &index_copy_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                        const at::Tensor &source);
at::Tensor prod(const at::Tensor &self, int64_t dim, bool keepdim,
                c10::optional<at::ScalarType> dtype);
at::Tensor std(const at::Tensor &self, bool unbiased);
at::Tensor erfinv(const at::Tensor &self);
at::Tensor squeeze(const at::Tensor &self, int64_t dim);
at::Tensor eq(const at::Tensor &self, const at::Scalar &other);
at::Tensor &index_add_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                       const at::Tensor &source);
at::Tensor &relu_(at::Tensor &self);
at::Tensor squeeze(const at::Tensor &self);
at::Tensor &hardsigmoid_(at::Tensor &self);
at::Tensor _adaptive_avg_pool3d_backward(const at::Tensor &grad_output,
                                         const at::Tensor &self);
at::Tensor log(const at::Tensor &self);
at::Tensor any(const at::Tensor &self);
at::Tensor &abs_(at::Tensor &self);
at::Tensor max(const at::Tensor &self);
at::Tensor pow(const at::Tensor &self, const at::Scalar &exponent);
at::Tensor fmod(const at::Tensor &self, const at::Scalar &other);
at::Tensor &scatter_(at::Tensor &self, int64_t dim, const at::Tensor &index,
                     const at::Tensor &src);
at::Tensor elu(const at::Tensor &self, const at::Scalar &alpha,
               const at::Scalar &scale, const at::Scalar &input_scale);
at::Tensor &put_(at::Tensor &self, const at::Tensor &index,
                 const at::Tensor &source, bool accumulate);
std::tuple<at::Tensor, at::Tensor> max_pool3d_with_indices(
    const at::Tensor &self, at::IntArrayRef kernel_size, at::IntArrayRef stride,
    at::IntArrayRef padding, at::IntArrayRef dilation, bool ceil_mode);
at::Tensor &log10_(at::Tensor &self);
at::Tensor _log_softmax_backward_data(const at::Tensor &grad_output,
                                      const at::Tensor &output, int64_t dim,
                                      const at::Tensor &self);
at::Tensor &reciprocal_(at::Tensor &self);
at::Tensor &eq_(at::Tensor &self, const at::Tensor &other);
at::Tensor &transpose_(at::Tensor &self, int64_t dim0, int64_t dim1);
at::Tensor max_pool2d(const at::Tensor &self, at::IntArrayRef kernel_size,
                      at::IntArrayRef stride, at::IntArrayRef padding,
                      at::IntArrayRef dilation, bool ceil_mode);
at::Tensor max_pool3d(const at::Tensor &self, at::IntArrayRef kernel_size,
                      at::IntArrayRef stride, at::IntArrayRef padding,
                      at::IntArrayRef dilation, bool ceil_mode);
}  // namespace torch_xla
