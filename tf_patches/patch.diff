diff --git a/tensorflow/compiler/xla/service/cpu/runtime_fp16.h b/tensorflow/compiler/xla/service/cpu/runtime_fp16.h
index 9fe020d5937..32774c2f3c0 100644
--- a/tensorflow/compiler/xla/service/cpu/runtime_fp16.h
+++ b/tensorflow/compiler/xla/service/cpu/runtime_fp16.h
@@ -18,12 +18,7 @@ limitations under the License.
 
 #include <stdint.h>
 
-// _Float16 always gets us the correct ABI type, so use that if available.
-// AArch64 GCC defines __FLT16_MANT_DIG__ even when _Float16 is not available.
-#if defined(__FLT16_MANT_DIG__) && \
-    (defined(__clang__) || !(defined(__GNUC__) && defined(__aarch64__)))
-using XlaF16ABIType = _Float16;
-#elif defined(__x86_64__)
+#if defined(__x86_64__)
 // Older versions of Clang don't have _Float16. Since both float and _Float16
 // are passed in the same register we can use the wider type and careful casting
 // to conform to x86_64 psABI. This only works with the assumption that we're
diff --git a/tensorflow/compiler/xla/stream_executor/BUILD b/tensorflow/compiler/xla/stream_executor/BUILD
index 1241cfedade..03a45f27702 100644
--- a/tensorflow/compiler/xla/stream_executor/BUILD
+++ b/tensorflow/compiler/xla/stream_executor/BUILD
@@ -176,7 +176,6 @@ tf_proto_library(
     name = "dnn_proto",
     srcs = ["dnn.proto"],
     cc_api_version = 2,
-    make_default_target_header_only = True,
 )
 
 cc_library(
diff --git a/tensorflow/core/distributed_runtime/request_id.cc b/tensorflow/core/distributed_runtime/request_id.cc
index 24fc3004391..c7cb01d44a3 100644
--- a/tensorflow/core/distributed_runtime/request_id.cc
+++ b/tensorflow/core/distributed_runtime/request_id.cc
@@ -22,7 +22,7 @@ namespace tensorflow {
 int64_t GetUniqueRequestId() {
   int64_t request_id = 0;
   while (request_id == 0) {
-    request_id = tsl::random::ThreadLocalNew64();
+    request_id = random::New64();
   }
   return request_id;
 }
diff --git a/tensorflow/core/distributed_runtime/request_id.h b/tensorflow/core/distributed_runtime/request_id.h
index 1ef60c8f47c..c597a15fcc9 100644
--- a/tensorflow/core/distributed_runtime/request_id.h
+++ b/tensorflow/core/distributed_runtime/request_id.h
@@ -16,8 +16,8 @@ limitations under the License.
 #ifndef TENSORFLOW_CORE_DISTRIBUTED_RUNTIME_REQUEST_ID_H_
 #define TENSORFLOW_CORE_DISTRIBUTED_RUNTIME_REQUEST_ID_H_
 
+#include "tensorflow/core/lib/random/random.h"
 #include "tensorflow/core/platform/types.h"
-#include "tensorflow/tsl/platform/random.h"
 
 namespace tensorflow {
 
diff --git a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
index 787287d0107..ebc74d74802 100644
--- a/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
+++ b/tensorflow/core/profiler/convert/xplane_to_tools_data.cc
@@ -251,8 +251,9 @@ StatusOr<std::string> ConvertMultiXSpacesToToolData(
     return ConvertMultiXSpacesToTfDataBottleneckAnalysis(session_snapshot);
   } else if (tool_name == "op_profile") {
     return ConvertMultiXSpacesToOpProfileViewer(session_snapshot);
-  } else if (tool_name == "memory_viewer" || tool_name == "graph_viewer") {
-    return ConvertHloProtoToToolData(session_snapshot, tool_name, options);
+    // this function is not being used by xla
+    // } else if (tool_name == "memory_viewer" || tool_name == "graph_viewer") {
+    //   return ConvertHloProtoToToolData(session_snapshot, tool_name, options);
   } else if (tool_name == "tool_names") {
     return GetAvailableToolNames(session_snapshot);
   } else if (tool_name == "_xplane.pb") {  // internal test only.
diff --git a/tensorflow/tsl/platform/random.cc b/tensorflow/tsl/platform/random.cc
index 636725ad650..02d0ecda23d 100644
--- a/tensorflow/tsl/platform/random.cc
+++ b/tensorflow/tsl/platform/random.cc
@@ -15,7 +15,6 @@ limitations under the License.
 
 #include "tensorflow/tsl/platform/random.h"
 
-#include <memory>
 #include <random>
 
 #include "tensorflow/tsl/platform/mutex.h"
@@ -40,12 +39,6 @@ uint64 New64() {
   return (*rng)();
 }
 
-uint64 ThreadLocalNew64() {
-  static thread_local std::unique_ptr<std::mt19937_64> rng =
-      std::unique_ptr<std::mt19937_64>(InitRngWithRandomSeed());
-  return (*rng)();
-}
-
 uint64 New64DefaultSeed() {
   static std::mt19937_64 rng = InitRngWithDefaultSeed();
   static mutex mu(LINKER_INITIALIZED);
diff --git a/tensorflow/tsl/platform/random.h b/tensorflow/tsl/platform/random.h
index 9e08670a2c6..e13555c5128 100644
--- a/tensorflow/tsl/platform/random.h
+++ b/tensorflow/tsl/platform/random.h
@@ -25,9 +25,6 @@ namespace random {
 // in different processes.
 uint64 New64();
 
-// Same as previous method, but uses a different RNG for each thread.
-uint64 ThreadLocalNew64();
-
 // Return a 64-bit random value. Uses
 // std::mersenne_twister_engine::default_seed as seed value.
 uint64 New64DefaultSeed();
