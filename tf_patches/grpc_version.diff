# Tensorflow's patch to update the protobuf will regress the XRT runtime.
diff --git a/.bazelrc b/.bazelrc
index a2ff5848fcf..930313e8c25 100644
--- a/.bazelrc
+++ b/.bazelrc
@@ -557,8 +557,8 @@ build:rbe_linux_py3_base --python_path="/usr/local/bin/python3.9"
 build:rbe_linux_py3_base --repo_env=TF_PYTHON_CONFIG_REPO="@ubuntu20.04-gcc9_manylinux2014-cuda11.2-cudnn8.1-tensorrt7.2_config_python3.9"

 build:rbe_win --config=rbe
-build:rbe_win --crosstool_top="//tensorflow/tools/toolchains/win/tf_win_01232023:toolchain"
-build:rbe_win --extra_toolchains="//tensorflow/tools/toolchains/win/tf_win_01232023:cc-toolchain-x64_windows"
+build:rbe_win --crosstool_top="//tensorflow/tools/toolchains/win/tf_win_01112023:toolchain"
+build:rbe_win --extra_toolchains="//tensorflow/tools/toolchains/win/tf_win_01112023:cc-toolchain-x64_windows"
 build:rbe_win --extra_execution_platforms="//tensorflow/tools/toolchains/win:rbe_windows_ltsc2019"
 build:rbe_win --host_platform="//tensorflow/tools/toolchains/win:rbe_windows_ltsc2019"
 build:rbe_win --platforms="//tensorflow/tools/toolchains/win:rbe_windows_ltsc2019"
diff --git a/tensorflow/compiler/xla/tests/build_defs.bzl b/tensorflow/compiler/xla/tests/build_defs.bzl
index 10b30f63755..306512e21b8 100644
--- a/tensorflow/compiler/xla/tests/build_defs.bzl
+++ b/tensorflow/compiler/xla/tests/build_defs.bzl
@@ -112,6 +112,7 @@ def xla_test(
     native.cc_library(
         name = "%s_lib" % name,
         srcs = srcs,
+        tags = tags,
         copts = copts,
         testonly = True,
         deps = deps,
diff --git a/tensorflow/opensource_only.files b/tensorflow/opensource_only.files
index 79c176026f7..e878daf41db 100644
--- a/tensorflow/opensource_only.files
+++ b/tensorflow/opensource_only.files
@@ -171,7 +171,6 @@ tensorflow/tools/toolchains/win/bazel_211/BUILD:
 tensorflow/tools/toolchains/win/tf_win_01072022/BUILD:
 tensorflow/tools/toolchains/win/tf_win_01112023/BUILD:
 tensorflow/tools/toolchains/win/tf_win_01122022/BUILD:
-tensorflow/tools/toolchains/win/tf_win_01232023/BUILD:
 tensorflow/tools/toolchains/win/tf_win_01242022/BUILD:
 tensorflow/tools/toolchains/win/tf_win_01252022/BUILD:
 tensorflow/tools/toolchains/win/tf_win_02042022/BUILD:
diff --git a/tensorflow/python/grappler/BUILD b/tensorflow/python/grappler/BUILD
index 3d1c95c22a9..fb99462a900 100644
--- a/tensorflow/python/grappler/BUILD
+++ b/tensorflow/python/grappler/BUILD
@@ -1,6 +1,6 @@
 load("//tensorflow:tensorflow.default.bzl", "cuda_py_test", "get_compatible_with_cloud", "tf_py_test", "tf_pybind_cc_library_wrapper", "tf_python_pybind_extension")
 load("//tensorflow/core/platform:build_config.bzl", "tf_protos_grappler")
-load("//tensorflow:tensorflow.bzl", "if_not_windows")
+load("//tensorflow:tensorflow.bzl", "VERSION", "if_not_windows", "tf_python_pybind_static_deps")

 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
@@ -249,13 +249,12 @@ tf_python_pybind_extension(
         "//tensorflow/core/grappler/optimizers:pywrap_required_hdrs",
         "//tensorflow/core/grappler/verifiers:pywrap_required_hdrs",
     ],
-    # This fails Windows builds. Please check b/266870200 for details.
-    #    dynamic_deps = ["//tensorflow/python:_pywrap_tensorflow_internal.so"] + select({
-    #        "//tensorflow:macos": ["//tensorflow:libtensorflow_framework.%s.dylib" % VERSION],
-    #        "//conditions:default": ["//tensorflow:libtensorflow_framework.so.%s" % VERSION],
-    #        "//tensorflow:windows": [],
-    #    }),
-    #    static_deps = tf_python_pybind_static_deps(),
+    dynamic_deps = ["//tensorflow/python:_pywrap_tensorflow_internal.so"] + select({
+        "//tensorflow:macos": ["//tensorflow:libtensorflow_framework.%s.dylib" % VERSION],
+        "//conditions:default": ["//tensorflow:libtensorflow_framework.so.%s" % VERSION],
+        "//tensorflow:windows": [],
+    }),
+    static_deps = tf_python_pybind_static_deps(),
     deps = [
         "//tensorflow/core:framework_headers_lib",
         "//tensorflow/core:lib_headers_for_pybind",
diff --git a/tensorflow/python/saved_model/BUILD b/tensorflow/python/saved_model/BUILD
index 57bf7a8a3b1..d0b51d17c81 100644
--- a/tensorflow/python/saved_model/BUILD
+++ b/tensorflow/python/saved_model/BUILD
@@ -3,7 +3,7 @@

 load("//tensorflow:strict.default.bzl", "py_strict_library")
 load("//tensorflow:tensorflow.default.bzl", "cuda_py_test", "tf_py_test", "tf_pybind_cc_library_wrapper", "tf_python_pybind_extension")
-load("//tensorflow:tensorflow.bzl", "if_google")
+load("//tensorflow:tensorflow.bzl", "VERSION", "if_google", "tf_python_pybind_static_deps")

 package(
     # copybara:uncomment default_applicable_licenses = ["//tensorflow:license"],
@@ -727,14 +727,13 @@ tf_python_pybind_extension(
         "pywrap_saved_model_fingerprinting.h",
         "pywrap_saved_model_metrics.h",
     ],
-    # This fails Windows builds. Please check b/266870200 for details.
-    #    dynamic_deps = ["//tensorflow/python:_pywrap_tensorflow_internal.so"] + select({
-    #        "//tensorflow:macos": ["//tensorflow:libtensorflow_framework.%s.dylib" % VERSION],
-    #        "//conditions:default": ["//tensorflow:libtensorflow_framework.so.%s" % VERSION],
-    #        "//tensorflow:windows": [],
-    #    }),
-    #    static_deps = tf_python_pybind_static_deps(),
+    dynamic_deps = ["//tensorflow/python:_pywrap_tensorflow_internal.so"] + select({
+        "//tensorflow:macos": ["//tensorflow:libtensorflow_framework.%s.dylib" % VERSION],
+        "//conditions:default": ["//tensorflow:libtensorflow_framework.so.%s" % VERSION],
+        "//tensorflow:windows": [],
+    }),
     features = ["-layering_check"],
+    static_deps = tf_python_pybind_static_deps(),
     visibility = ["//tensorflow/python/training:__subpackages__"],
     deps = [
         ":pywrap_saved_model_headers",
diff --git a/tensorflow/tools/ci_build/release/requirements_common.txt b/tensorflow/tools/ci_build/release/requirements_common.txt
index 051387bf64e..be3f16a4edb 100644
--- a/tensorflow/tools/ci_build/release/requirements_common.txt
+++ b/tensorflow/tools/ci_build/release/requirements_common.txt
@@ -11,7 +11,7 @@ h5py ~= 3.8.0  # Earliest version for Python 3.11
 numpy ~= 1.22.0; python_version < '3.11'
 numpy ~= 1.23.2; python_version >= '3.11' # Earliest version for Python 3.11
 opt_einsum ~= 3.3.0
-protobuf ~= 3.20.3  # NOTE: Earliest version for Python 3.10
+protobuf ~= 3.19.3  # NOTE: Earliest version for Python 3.10
 six ~= 1.16.0
 termcolor ~= 2.1.1
 typing_extensions ~= 3.10.0.0
diff --git a/tensorflow/tools/def_file_filter/def_file_filter.py.tpl b/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
index 444c2d151ab..8e97ea56f9f 100644
--- a/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
+++ b/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
@@ -288,21 +288,15 @@ def main():
     def_fp.write("\t ?NewSession@tensorflow@@YAPEAVSession@1@AEBUSessionOptions@1@@Z\n")
     def_fp.write("\t ??1SavedModelBundleInterface@tensorflow@@UEAA@XZ\n")
     def_fp.write("\t ?MaybeSavedModelDirectory@tensorflow@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z\n")
+    def_fp.write("\t ?_TensorShapeProto_default_instance_@tensorflow@@3VTensorShapeProtoDefaultTypeInternal@1@A\n")
+    def_fp.write("\t ?_GraphDef_default_instance_@tensorflow@@3VGraphDefDefaultTypeInternal@1@A\n")
     def_fp.write("\t ??_7HistogramProto@tensorflow@@6B@\n")
     def_fp.write("\t ??_7ConfigProto@tensorflow@@6B@\n") # for _pywrap_tfe
     def_fp.write("\t ??_7CoordinatedTask@tensorflow@@6B@\n") # for _pywrap_tfe
+    def_fp.write("\t ??0CoordinatedTask@tensorflow@@QEAA@XZ\n") # for _pywrap_tfe
     def_fp.write("\t ?InternalSwap@CoordinatedTask@tensorflow@@AEAAXPEAV12@@Z\n") # for _pywrap_tfe
     def_fp.write("\t ?kSeed@MixingHashState@hash_internal@lts_20220623@absl@@0QEBXEB\n") # for _pywrap_tfcompile
     def_fp.write("\t ?kEmptyGroup@container_internal@lts_20220623@absl@@3QBW4ctrl_t@123@B\n") # for _pywrap_tfcompile
-    def_fp.write("\t ??_7GraphDef@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7DeviceProperties@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7MetaGraphDef@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7SavedModel@tensorflow@@6B@\n")
-    def_fp.write("\t ??0CoordinatedTask@tensorflow@@QEAA@XZ\n") # for _pywrap_tfe
-    def_fp.write("\t ?Set@ArenaStringPtr@internal@protobuf@google@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAVArena@34@@Z\n") # _pywrap_tfe
-    def_fp.write("\t ??1CoordinatedTask@tensorflow@@UEAA@XZ\n") # for _pywrap_tfe
-    def_fp.write("\t ?CopyFrom@CoordinatedTask@tensorflow@@QEAAXAEBV12@@Z\n") # for _pywrap_tfe
-    def_fp.write("\t ??0CoordinatedTask@tensorflow@@IEAA@PEAVArena@protobuf@google@@_N@Z\n") # for _pywrap_tfe

     # Each symbols returned by undname matches the same position in candidates.
     # We compare on undname but use the decorated name from candidates.
diff --git a/tensorflow/tools/pip_package/setup.py b/tensorflow/tools/pip_package/setup.py
index cc17d57800e..329588662e9 100644
--- a/tensorflow/tools/pip_package/setup.py
+++ b/tensorflow/tools/pip_package/setup.py
@@ -104,7 +104,7 @@ REQUIRED_PACKAGES = [
     # See also: https://github.com/protocolbuffers/protobuf/issues/9954
     # See also: https://github.com/tensorflow/tensorflow/issues/56077
     # This is a temporary patch for now, to patch previous TF releases.
-    'protobuf>=3.20.3,<5.0.0dev,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5',
+    'protobuf >= 3.9.2, < 3.20',
     'setuptools',
     'six >= 1.12.0',
     'termcolor >= 1.1.0',
diff --git a/tensorflow/tools/toolchains/win/BUILD b/tensorflow/tools/toolchains/win/BUILD
index e0e71813c32..53ce2e54757 100644
--- a/tensorflow/tools/toolchains/win/BUILD
+++ b/tensorflow/tools/toolchains/win/BUILD
@@ -17,7 +17,7 @@ platform(
     remote_execution_properties = """
         properties:{
           name: "container-image"
-          value: "docker://gcr.io/tensorflow-testing/tf-win2019-rbe@sha256:6840d4ea7db934541cc36ef0ca10fb6703b28bd49f762d22768d6d5728969d03"
+          value: "docker://gcr.io/tensorflow-testing/tf-win2019-rbe@sha256:768fbd44022f6f4e3f76701bf2fc623f514ce9fe1a5796ea9533d2ac3e0474de"
         }
         properties:{
           name: "OSFamily"
diff --git a/tensorflow/tools/toolchains/win/tf_win_01232023/BUILD b/tensorflow/tools/toolchains/win/tf_win_01232023/BUILD
deleted file mode 100644
index f245f6d0789..00000000000
--- a/tensorflow/tools/toolchains/win/tf_win_01232023/BUILD
+++ /dev/null
@@ -1,630 +0,0 @@
-# Copyright 2018 The Bazel Authors. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-# This becomes the BUILD file for @local_config_cc// under Windows.
-
-load("@rules_cc//cc:defs.bzl", "cc_library", "cc_toolchain", "cc_toolchain_suite")
-load(":windows_cc_toolchain_config.bzl", "cc_toolchain_config")
-load(":armeabi_cc_toolchain_config.bzl", "armeabi_cc_toolchain_config")
-
-package(default_visibility = ["//visibility:public"])
-
-cc_library(
-    name = "malloc",
-)
-
-filegroup(
-    name = "empty",
-    srcs = [],
-)
-
-filegroup(
-    name = "mingw_compiler_files",
-    srcs = [":builtin_include_directory_paths_mingw"],
-)
-
-filegroup(
-    name = "clangcl_compiler_files",
-    srcs = [":builtin_include_directory_paths_clangcl"],
-)
-
-filegroup(
-    name = "msvc_compiler_files",
-    srcs = [":builtin_include_directory_paths_msvc"],
-)
-
-# Hardcoded toolchain, legacy behaviour.
-cc_toolchain_suite(
-    name = "toolchain",
-    toolchains = {
-        "armeabi-v7a|compiler": ":cc-compiler-armeabi-v7a",
-        "x64_windows|msvc-cl": ":cc-compiler-x64_windows",
-        "x64_x86_windows|msvc-cl": ":cc-compiler-x64_x86_windows",
-        "x64_arm_windows|msvc-cl": ":cc-compiler-x64_arm_windows",
-        "x64_arm64_windows|msvc-cl": ":cc-compiler-arm64_windows",
-        "arm64_windows|msvc-cl": ":cc-compiler-arm64_windows",
-        "x64_windows|msys-gcc": ":cc-compiler-x64_windows_msys",
-        "x64_windows|mingw-gcc": ":cc-compiler-x64_windows_mingw",
-        "x64_windows|clang-cl": ":cc-compiler-x64_windows-clang-cl",
-        "x64_windows_msys": ":cc-compiler-x64_windows_msys",
-        "x64_windows": ":cc-compiler-x64_windows",
-        "x64_x86_windows": ":cc-compiler-x64_x86_windows",
-        "x64_arm_windows": ":cc-compiler-x64_arm_windows",
-        "x64_arm64_windows": ":cc-compiler-arm64_windows",
-        "arm64_windows": ":cc-compiler-arm64_windows",
-        "x64_arm64_windows|clang-cl": ":cc-compiler-arm64_windows-clang-cl",
-        "arm64_windows|clang-cl": ":cc-compiler-arm64_windows-clang-cl",
-        "armeabi-v7a": ":cc-compiler-armeabi-v7a",
-    },
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_windows_msys",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":mingw_compiler_files",
-    compiler_files = ":mingw_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":msys_x64",
-    toolchain_identifier = "msys_x64",
-)
-
-cc_toolchain_config(
-    name = "msys_x64",
-    abi_libc_version = "local",
-    abi_version = "local",
-    compiler = "msys-gcc",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [
-        "c:/tools/msys64/usr/",
-    ],
-    dbg_mode_debug_flag = "/DEBUG:FULL",
-    fastbuild_mode_debug_flag = "/DEBUG:FASTLINK",
-    host_system_name = "local",
-    target_libc = "msys",
-    target_system_name = "local",
-    tool_bin_path = "c:/tools/msys64/usr/bin",
-    tool_paths = {
-        "ar": "c:/tools/msys64/usr/bin/ar",
-        "cpp": "c:/tools/msys64/usr/bin/cpp",
-        "dwp": "c:/tools/msys64/usr/bin/dwp",
-        "gcc": "c:/tools/msys64/usr/bin/gcc",
-        "gcov": "c:/tools/msys64/usr/bin/gcov",
-        "ld": "c:/tools/msys64/usr/bin/ld",
-        "nm": "c:/tools/msys64/usr/bin/nm",
-        "objcopy": "c:/tools/msys64/usr/bin/objcopy",
-        "objdump": "c:/tools/msys64/usr/bin/objdump",
-        "strip": "c:/tools/msys64/usr/bin/strip",
-    },
-)
-
-toolchain(
-    name = "cc-toolchain-x64_windows_msys",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-        "@bazel_tools//tools/cpp:msys",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_windows_msys",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_windows_mingw",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":mingw_compiler_files",
-    compiler_files = ":mingw_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 0,
-    toolchain_config = ":msys_x64_mingw",
-    toolchain_identifier = "msys_x64_mingw",
-)
-
-cc_toolchain_config(
-    name = "msys_x64_mingw",
-    abi_libc_version = "local",
-    abi_version = "local",
-    compiler = "mingw-gcc",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [
-        "c:/tools/msys64/mingw64/",
-    ],
-    dbg_mode_debug_flag = "/DEBUG:FULL",
-    fastbuild_mode_debug_flag = "/DEBUG:FASTLINK",
-    host_system_name = "local",
-    target_libc = "mingw",
-    target_system_name = "local",
-    tool_bin_path = "c:/tools/msys64/mingw64/bin",
-    tool_paths = {
-        "ar": "c:/tools/msys64/mingw64/bin/ar",
-        "cpp": "c:/tools/msys64/mingw64/bin/cpp",
-        "dwp": "c:/tools/msys64/mingw64/bin/dwp",
-        "gcc": "c:/tools/msys64/mingw64/bin/gcc",
-        "gcov": "c:/tools/msys64/mingw64/bin/gcov",
-        "ld": "c:/tools/msys64/mingw64/bin/ld",
-        "nm": "c:/tools/msys64/mingw64/bin/nm",
-        "objcopy": "c:/tools/msys64/mingw64/bin/objcopy",
-        "objdump": "c:/tools/msys64/mingw64/bin/objdump",
-        "strip": "c:/tools/msys64/mingw64/bin/strip",
-    },
-)
-
-toolchain(
-    name = "cc-toolchain-x64_windows_mingw",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-        "@bazel_tools//tools/cpp:mingw",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_windows_mingw",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_windows",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":msvc_compiler_files",
-    compiler_files = ":msvc_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":msvc_x64",
-    toolchain_identifier = "msvc_x64",
-)
-
-cc_toolchain_config(
-    name = "msvc_x64",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:X64"],
-    compiler = "msvc-cl",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [
-        "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\include",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\ucrt",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\shared",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\um",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\winrt",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\cppwinrt",
-    ],
-    dbg_mode_debug_flag = "/DEBUG:FULL",
-    default_link_flags = ["/MACHINE:X64"],
-    fastbuild_mode_debug_flag = "/DEBUG:FASTLINK",
-    host_system_name = "local",
-    msvc_cl_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe",
-    msvc_env_include = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\include;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\ucrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\shared;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\um;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\winrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\cppwinrt",
-    msvc_env_lib = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\lib\\x64;C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.20348.0\\ucrt\\x64;C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.20348.0\\um\\x64",
-    msvc_env_path = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\VC\\VCPackages;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin\\Roslyn;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\devinit;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.20348.0\\x64;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\\\MSBuild\\Current\\Bin;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\;;C:\\Windows\\system32",
-    msvc_env_tmp = "C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp",
-    msvc_lib_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/lib.exe",
-    msvc_link_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/link.exe",
-    msvc_ml_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/ml64.exe",
-    target_libc = "msvcrt",
-    target_system_name = "local",
-    tool_paths = {
-        "ar": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/lib.exe",
-        "ml": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/ml64.exe",
-        "cpp": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe",
-        "gcc": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/cl.exe",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x64/link.exe",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "msvc_x64",
-)
-
-toolchain(
-    name = "cc-toolchain-x64_windows",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_windows",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_x86_windows",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":msvc_compiler_files",
-    compiler_files = ":msvc_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":msvc_x64_x86",
-    toolchain_identifier = "msvc_x64_x86",
-)
-
-cc_toolchain_config(
-    name = "msvc_x64_x86",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:X86"],
-    compiler = "msvc-cl",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [
-        "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\include",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\ucrt",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\shared",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\um",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\winrt",
-        "C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\cppwinrt",
-    ],
-    dbg_mode_debug_flag = "/DEBUG:FULL",
-    default_link_flags = ["/MACHINE:X86"],
-    fastbuild_mode_debug_flag = "/DEBUG:FASTLINK",
-    host_system_name = "local",
-    msvc_cl_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/cl.exe",
-    msvc_env_include = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\include;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\ucrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\shared;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\um;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\winrt;C:\\Program Files (x86)\\Windows Kits\\10\\include\\10.0.20348.0\\cppwinrt",
-    msvc_env_lib = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\lib\\x86;C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.20348.0\\ucrt\\x86;C:\\Program Files (x86)\\Windows Kits\\10\\lib\\10.0.20348.0\\um\\x86",
-    msvc_env_path = "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x86;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\VC\\Tools\\MSVC\\14.29.30133\\bin\\HostX64\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\VC\\VCPackages;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TestWindow;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\CommonExtensions\\Microsoft\\TeamFoundation\\Team Explorer;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\MSBuild\\Current\\bin\\Roslyn;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\devinit;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\10.0.20348.0\\x64;C:\\Program Files (x86)\\Windows Kits\\10\\bin\\x64;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\\\MSBuild\\Current\\Bin;C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\IDE\\;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools\\;;C:\\Windows\\system32",
-    msvc_env_tmp = "C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp",
-    msvc_lib_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/lib.exe",
-    msvc_link_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/link.exe",
-    msvc_ml_path = "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/ml.exe",
-    target_libc = "msvcrt",
-    target_system_name = "local",
-    tool_paths = {
-        "ar": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/lib.exe",
-        "ml": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/ml.exe",
-        "cpp": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/cl.exe",
-        "gcc": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/cl.exe",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30133/bin/HostX64/x86/link.exe",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "msvc_x64_x86",
-)
-
-toolchain(
-    name = "cc-toolchain-x64_x86_windows",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:x86_32",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_x86_windows",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_arm_windows",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":msvc_compiler_files",
-    compiler_files = ":msvc_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":msvc_x64_arm",
-    toolchain_identifier = "msvc_x64_arm",
-)
-
-cc_toolchain_config(
-    name = "msvc_x64_arm",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:ARM"],
-    compiler = "msvc-cl",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [],
-    dbg_mode_debug_flag = "/DEBUG",
-    default_link_flags = ["/MACHINE:ARM"],
-    fastbuild_mode_debug_flag = "/DEBUG",
-    host_system_name = "local",
-    msvc_cl_path = "vc_installation_error_arm.bat",
-    msvc_env_include = "msvc_not_found",
-    msvc_env_lib = "msvc_not_found",
-    msvc_env_path = "msvc_not_found",
-    msvc_env_tmp = "msvc_not_found",
-    msvc_lib_path = "vc_installation_error_arm.bat",
-    msvc_link_path = "vc_installation_error_arm.bat",
-    msvc_ml_path = "vc_installation_error_arm.bat",
-    target_libc = "msvcrt",
-    target_system_name = "local",
-    tool_paths = {
-        "ar": "vc_installation_error_arm.bat",
-        "ml": "vc_installation_error_arm.bat",
-        "cpp": "vc_installation_error_arm.bat",
-        "gcc": "vc_installation_error_arm.bat",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "vc_installation_error_arm.bat",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "msvc_x64_arm",
-)
-
-toolchain(
-    name = "cc-toolchain-x64_arm_windows",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:arm",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_arm_windows",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-arm64_windows",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":msvc_compiler_files",
-    compiler_files = ":msvc_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":msvc_arm64",
-    toolchain_identifier = "msvc_arm64",
-)
-
-cc_toolchain_config(
-    name = "msvc_arm64",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:ARM64"],
-    compiler = "msvc-cl",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [],
-    dbg_mode_debug_flag = "/DEBUG",
-    default_link_flags = ["/MACHINE:ARM64"],
-    fastbuild_mode_debug_flag = "/DEBUG",
-    host_system_name = "local",
-    msvc_cl_path = "vc_installation_error_arm64.bat",
-    msvc_env_include = "msvc_not_found",
-    msvc_env_lib = "msvc_not_found",
-    msvc_env_path = "msvc_not_found",
-    msvc_env_tmp = "msvc_not_found",
-    msvc_lib_path = "vc_installation_error_arm64.bat",
-    msvc_link_path = "vc_installation_error_arm64.bat",
-    msvc_ml_path = "vc_installation_error_arm64.bat",
-    target_libc = "msvcrt",
-    target_system_name = "local",
-    tool_paths = {
-        "ar": "vc_installation_error_arm64.bat",
-        "ml": "vc_installation_error_arm64.bat",
-        "cpp": "vc_installation_error_arm64.bat",
-        "gcc": "vc_installation_error_arm64.bat",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "vc_installation_error_arm64.bat",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "msvc_arm64",
-)
-
-toolchain(
-    name = "cc-toolchain-arm64_windows",
-    exec_compatible_with = [
-        "@platforms//os:windows",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:arm64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-arm64_windows",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-x64_windows-clang-cl",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":clangcl_compiler_files",
-    compiler_files = ":clangcl_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":clang_cl_x64",
-    toolchain_identifier = "clang_cl_x64",
-)
-
-cc_toolchain_config(
-    name = "clang_cl_x64",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:X64"],
-    compiler = "clang-cl",
-    cpu = "x64_windows",
-    cxx_builtin_include_directories = [],
-    dbg_mode_debug_flag = "/DEBUG",
-    default_link_flags = [
-        "/MACHINE:X64",
-        "/DEFAULTLIB:clang_rt.builtins-x86_64.lib",
-    ],
-    fastbuild_mode_debug_flag = "/DEBUG",
-    host_system_name = "local",
-    msvc_cl_path = "clang_installation_error.bat",
-    msvc_env_include = "clang_cl_not_found",
-    msvc_env_lib = "clang_cl_not_found",
-    msvc_env_path = "clang_cl_not_found",
-    msvc_env_tmp = "clang_cl_not_found",
-    msvc_lib_path = "clang_installation_error.bat",
-    msvc_link_path = "clang_installation_error.bat",
-    msvc_ml_path = "clang_installation_error.bat",
-    target_libc = "msvcrt",
-    target_system_name = "local",
-    tool_paths = {
-        "ar": "clang_installation_error.bat",
-        "ml": "clang_installation_error.bat",
-        "cpp": "clang_installation_error.bat",
-        "gcc": "clang_installation_error.bat",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "clang_installation_error.bat",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "clang_cl_x64",
-)
-
-toolchain(
-    name = "cc-toolchain-x64_windows-clang-cl",
-    exec_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-        "@bazel_tools//tools/cpp:clang-cl",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:x86_64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-x64_windows-clang-cl",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-arm64_windows-clang-cl",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":clangcl_compiler_files",
-    compiler_files = ":clangcl_compiler_files",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":clang_cl_arm64",
-    toolchain_identifier = "clang_cl_arm64",
-)
-
-cc_toolchain_config(
-    name = "clang_cl_arm64",
-    abi_libc_version = "local",
-    abi_version = "local",
-    archiver_flags = ["/MACHINE:ARM64"],
-    compiler = "clang-cl",
-    cpu = "arm64_windows",
-    cxx_builtin_include_directories = [],
-    dbg_mode_debug_flag = "/DEBUG",
-    default_link_flags = ["/MACHINE:ARM64"],
-    fastbuild_mode_debug_flag = "/DEBUG",
-    host_system_name = "local",
-    msvc_cl_path = "vc_installation_error_arm64.bat",
-    msvc_env_include = "clang_cl_not_found",
-    msvc_env_lib = "clang_cl_not_found",
-    msvc_env_path = "clang_cl_not_found",
-    msvc_env_tmp = "clang_cl_not_found",
-    msvc_lib_path = "vc_installation_error_arm64.bat",
-    msvc_link_path = "vc_installation_error_arm64.bat",
-    msvc_ml_path = "vc_installation_error_arm64.bat",
-    target_libc = "msvcrt",
-    target_system_name = "aarch64-pc-windows-msvc",
-    tool_paths = {
-        "ar": "vc_installation_error_arm64.bat",
-        "ml": "vc_installation_error_arm64.bat",
-        "cpp": "vc_installation_error_arm64.bat",
-        "gcc": "vc_installation_error_arm64.bat",
-        "gcov": "wrapper/bin/msvc_nop.bat",
-        "ld": "vc_installation_error_arm64.bat",
-        "nm": "wrapper/bin/msvc_nop.bat",
-        "objcopy": "wrapper/bin/msvc_nop.bat",
-        "objdump": "wrapper/bin/msvc_nop.bat",
-        "strip": "wrapper/bin/msvc_nop.bat",
-    },
-    toolchain_identifier = "clang_cl_arm64",
-)
-
-toolchain(
-    name = "cc-toolchain-arm64_windows-clang-cl",
-    exec_compatible_with = [
-        "@platforms//os:windows",
-        "@bazel_tools//tools/cpp:clang-cl",
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:arm64",
-        "@platforms//os:windows",
-    ],
-    toolchain = ":cc-compiler-arm64_windows-clang-cl",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
-
-cc_toolchain(
-    name = "cc-compiler-armeabi-v7a",
-    all_files = ":empty",
-    ar_files = ":empty",
-    as_files = ":empty",
-    compiler_files = ":empty",
-    dwp_files = ":empty",
-    linker_files = ":empty",
-    objcopy_files = ":empty",
-    strip_files = ":empty",
-    supports_param_files = 1,
-    toolchain_config = ":stub_armeabi-v7a",
-    toolchain_identifier = "stub_armeabi-v7a",
-)
-
-armeabi_cc_toolchain_config(name = "stub_armeabi-v7a")
-
-toolchain(
-    name = "cc-toolchain-armeabi-v7a",
-    exec_compatible_with = [
-    ],
-    target_compatible_with = [
-        "@platforms//cpu:armv7",
-        "@platforms//os:android",
-    ],
-    toolchain = ":cc-compiler-armeabi-v7a",
-    toolchain_type = "@bazel_tools//tools/cpp:toolchain_type",
-)
diff --git a/tensorflow/tools/toolchains/win/tf_win_01232023/armeabi_cc_toolchain_config.bzl b/tensorflow/tools/toolchains/win/tf_win_01232023/armeabi_cc_toolchain_config.bzl
deleted file mode 100644
index 72ef48ae6d6..00000000000
--- a/tensorflow/tools/toolchains/win/tf_win_01232023/armeabi_cc_toolchain_config.bzl
+++ /dev/null
@@ -1,82 +0,0 @@
-# Copyright 2019 The Bazel Authors. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-"""A Starlark cc_toolchain configuration rule"""
-
-load(
-    "@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
-    "feature",
-    "tool_path",
-)
-
-def _impl(ctx):
-    toolchain_identifier = "stub_armeabi-v7a"
-    host_system_name = "armeabi-v7a"
-    target_system_name = "armeabi-v7a"
-    target_cpu = "armeabi-v7a"
-    target_libc = "armeabi-v7a"
-    compiler = "compiler"
-    abi_version = "armeabi-v7a"
-    abi_libc_version = "armeabi-v7a"
-    cc_target_os = None
-    builtin_sysroot = None
-    action_configs = []
-
-    supports_pic_feature = feature(name = "supports_pic", enabled = True)
-    supports_dynamic_linker_feature = feature(name = "supports_dynamic_linker", enabled = True)
-    features = [supports_dynamic_linker_feature, supports_pic_feature]
-
-    cxx_builtin_include_directories = []
-    artifact_name_patterns = []
-    make_variables = []
-
-    tool_paths = [
-        tool_path(name = "ar", path = "/bin/false"),
-        tool_path(name = "cpp", path = "/bin/false"),
-        tool_path(name = "dwp", path = "/bin/false"),
-        tool_path(name = "gcc", path = "/bin/false"),
-        tool_path(name = "gcov", path = "/bin/false"),
-        tool_path(name = "ld", path = "/bin/false"),
-        tool_path(name = "llvm-profdata", path = "/bin/false"),
-        tool_path(name = "nm", path = "/bin/false"),
-        tool_path(name = "objcopy", path = "/bin/false"),
-        tool_path(name = "objdump", path = "/bin/false"),
-        tool_path(name = "strip", path = "/bin/false"),
-    ]
-
-    return cc_common.create_cc_toolchain_config_info(
-        ctx = ctx,
-        features = features,
-        action_configs = action_configs,
-        artifact_name_patterns = artifact_name_patterns,
-        cxx_builtin_include_directories = cxx_builtin_include_directories,
-        toolchain_identifier = toolchain_identifier,
-        host_system_name = host_system_name,
-        target_system_name = target_system_name,
-        target_cpu = target_cpu,
-        target_libc = target_libc,
-        compiler = compiler,
-        abi_version = abi_version,
-        abi_libc_version = abi_libc_version,
-        tool_paths = tool_paths,
-        make_variables = make_variables,
-        builtin_sysroot = builtin_sysroot,
-        cc_target_os = cc_target_os,
-    )
-
-armeabi_cc_toolchain_config = rule(
-    implementation = _impl,
-    attrs = {},
-    provides = [CcToolchainConfigInfo],
-)
diff --git a/tensorflow/tools/toolchains/win/tf_win_01232023/builtin_include_directory_paths_msvc b/tensorflow/tools/toolchains/win/tf_win_01232023/builtin_include_directory_paths_msvc
deleted file mode 100644
index 55ba44f761e..00000000000
--- a/tensorflow/tools/toolchains/win/tf_win_01232023/builtin_include_directory_paths_msvc
+++ /dev/null
@@ -1,6 +0,0 @@
-This file is generated by cc_configure and contains builtin include directories
-that msvc reported. This file is a dependency of every compilation action and
-changes to it will be reflected in the action cache key. When some of these
-paths change, Bazel will make sure to rerun the action, even though none of
-declared action inputs or the action commandline changes.
-
diff --git a/tensorflow/tools/toolchains/win/tf_win_01232023/toolchain_image_info b/tensorflow/tools/toolchains/win/tf_win_01232023/toolchain_image_info
deleted file mode 100644
index db39c0d5529..00000000000
--- a/tensorflow/tools/toolchains/win/tf_win_01232023/toolchain_image_info
+++ /dev/null
@@ -1,2 +0,0 @@
-REPOSITORY                                            TAG                 DIGEST                                                                    IMAGE ID            CREATED             SIZE
-gcr.io/tensorflow-testing/tf-win2019-docker-staging   latest              sha256:6840d4ea7db934541cc36ef0ca10fb6703b28bd49f762d22768d6d5728969d03   2b9602ce9aab        5 minutes ago       15.9GB
\ No newline at end of file
diff --git a/tensorflow/tools/toolchains/win/tf_win_01232023/windows_cc_toolchain_config.bzl b/tensorflow/tools/toolchains/win/tf_win_01232023/windows_cc_toolchain_config.bzl
deleted file mode 100644
index d913692b7e0..00000000000
--- a/tensorflow/tools/toolchains/win/tf_win_01232023/windows_cc_toolchain_config.bzl
+++ /dev/null
@@ -1,1392 +0,0 @@
-# Copyright 2019 The Bazel Authors. All rights reserved.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#    http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-
-"""A Starlark cc_toolchain configuration rule for Windows"""
-
-load(
-    "@bazel_tools//tools/cpp:cc_toolchain_config_lib.bzl",
-    "action_config",
-    "artifact_name_pattern",
-    "env_entry",
-    "env_set",
-    "feature",
-    "flag_group",
-    "flag_set",
-    "tool",
-    "tool_path",
-    "variable_with_value",
-    "with_feature_set",
-)
-load("@bazel_tools//tools/build_defs/cc:action_names.bzl", "ACTION_NAMES")
-
-all_compile_actions = [
-    ACTION_NAMES.c_compile,
-    ACTION_NAMES.cpp_compile,
-    ACTION_NAMES.linkstamp_compile,
-    ACTION_NAMES.assemble,
-    ACTION_NAMES.preprocess_assemble,
-    ACTION_NAMES.cpp_header_parsing,
-    ACTION_NAMES.cpp_module_compile,
-    ACTION_NAMES.cpp_module_codegen,
-    ACTION_NAMES.clif_match,
-    ACTION_NAMES.lto_backend,
-]
-
-all_cpp_compile_actions = [
-    ACTION_NAMES.cpp_compile,
-    ACTION_NAMES.linkstamp_compile,
-    ACTION_NAMES.cpp_header_parsing,
-    ACTION_NAMES.cpp_module_compile,
-    ACTION_NAMES.cpp_module_codegen,
-    ACTION_NAMES.clif_match,
-]
-
-preprocessor_compile_actions = [
-    ACTION_NAMES.c_compile,
-    ACTION_NAMES.cpp_compile,
-    ACTION_NAMES.linkstamp_compile,
-    ACTION_NAMES.preprocess_assemble,
-    ACTION_NAMES.cpp_header_parsing,
-    ACTION_NAMES.cpp_module_compile,
-    ACTION_NAMES.clif_match,
-]
-
-codegen_compile_actions = [
-    ACTION_NAMES.c_compile,
-    ACTION_NAMES.cpp_compile,
-    ACTION_NAMES.linkstamp_compile,
-    ACTION_NAMES.assemble,
-    ACTION_NAMES.preprocess_assemble,
-    ACTION_NAMES.cpp_module_codegen,
-    ACTION_NAMES.lto_backend,
-]
-
-all_link_actions = [
-    ACTION_NAMES.cpp_link_executable,
-    ACTION_NAMES.cpp_link_dynamic_library,
-    ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-]
-
-def _use_msvc_toolchain(ctx):
-    return ctx.attr.cpu in ["x64_windows", "arm64_windows"] and (ctx.attr.compiler == "msvc-cl" or ctx.attr.compiler == "clang-cl")
-
-def _impl(ctx):
-    if _use_msvc_toolchain(ctx):
-        artifact_name_patterns = [
-            artifact_name_pattern(
-                category_name = "object_file",
-                prefix = "",
-                extension = ".obj",
-            ),
-            artifact_name_pattern(
-                category_name = "static_library",
-                prefix = "",
-                extension = ".lib",
-            ),
-            artifact_name_pattern(
-                category_name = "alwayslink_static_library",
-                prefix = "",
-                extension = ".lo.lib",
-            ),
-            artifact_name_pattern(
-                category_name = "executable",
-                prefix = "",
-                extension = ".exe",
-            ),
-            artifact_name_pattern(
-                category_name = "dynamic_library",
-                prefix = "",
-                extension = ".dll",
-            ),
-            artifact_name_pattern(
-                category_name = "interface_library",
-                prefix = "",
-                extension = ".if.lib",
-            ),
-        ]
-    else:
-        artifact_name_patterns = [
-            artifact_name_pattern(
-                category_name = "executable",
-                prefix = "",
-                extension = ".exe",
-            ),
-        ]
-
-    if _use_msvc_toolchain(ctx):
-        cpp_link_nodeps_dynamic_library_action = action_config(
-            action_name = ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-            implies = [
-                "nologo",
-                "shared_flag",
-                "linkstamps",
-                "output_execpath_flags",
-                "input_param_flags",
-                "user_link_flags",
-                "linker_subsystem_flag",
-                "linker_param_file",
-                "msvc_env",
-                "no_stripping",
-                "has_configured_linker_path",
-                "def_file",
-            ],
-            tools = [tool(path = ctx.attr.msvc_link_path)],
-        )
-
-        cpp_link_static_library_action = action_config(
-            action_name = ACTION_NAMES.cpp_link_static_library,
-            implies = [
-                "nologo",
-                "archiver_flags",
-                "input_param_flags",
-                "linker_param_file",
-                "msvc_env",
-            ],
-            tools = [tool(path = ctx.attr.msvc_lib_path)],
-        )
-
-        assemble_action = action_config(
-            action_name = ACTION_NAMES.assemble,
-            implies = [
-                "compiler_input_flags",
-                "compiler_output_flags",
-                "nologo",
-                "msvc_env",
-                "sysroot",
-            ],
-            tools = [tool(path = ctx.attr.msvc_ml_path)],
-        )
-
-        preprocess_assemble_action = action_config(
-            action_name = ACTION_NAMES.preprocess_assemble,
-            implies = [
-                "compiler_input_flags",
-                "compiler_output_flags",
-                "nologo",
-                "msvc_env",
-                "sysroot",
-            ],
-            tools = [tool(path = ctx.attr.msvc_ml_path)],
-        )
-
-        c_compile_action = action_config(
-            action_name = ACTION_NAMES.c_compile,
-            implies = [
-                "compiler_input_flags",
-                "compiler_output_flags",
-                "nologo",
-                "msvc_env",
-                "parse_showincludes",
-                "user_compile_flags",
-                "sysroot",
-            ],
-            tools = [tool(path = ctx.attr.msvc_cl_path)],
-        )
-
-        linkstamp_compile_action = action_config(
-            action_name = ACTION_NAMES.linkstamp_compile,
-            implies = [
-                "compiler_input_flags",
-                "compiler_output_flags",
-                "default_compile_flags",
-                "nologo",
-                "msvc_env",
-                "parse_showincludes",
-                "user_compile_flags",
-                "sysroot",
-                "unfiltered_compile_flags",
-            ],
-            tools = [tool(path = ctx.attr.msvc_cl_path)],
-        )
-
-        cpp_compile_action = action_config(
-            action_name = ACTION_NAMES.cpp_compile,
-            implies = [
-                "compiler_input_flags",
-                "compiler_output_flags",
-                "nologo",
-                "msvc_env",
-                "parse_showincludes",
-                "user_compile_flags",
-                "sysroot",
-            ],
-            tools = [tool(path = ctx.attr.msvc_cl_path)],
-        )
-
-        cpp_link_executable_action = action_config(
-            action_name = ACTION_NAMES.cpp_link_executable,
-            implies = [
-                "nologo",
-                "linkstamps",
-                "output_execpath_flags",
-                "input_param_flags",
-                "user_link_flags",
-                "linker_subsystem_flag",
-                "linker_param_file",
-                "msvc_env",
-                "no_stripping",
-            ],
-            tools = [tool(path = ctx.attr.msvc_link_path)],
-        )
-
-        cpp_link_dynamic_library_action = action_config(
-            action_name = ACTION_NAMES.cpp_link_dynamic_library,
-            implies = [
-                "nologo",
-                "shared_flag",
-                "linkstamps",
-                "output_execpath_flags",
-                "input_param_flags",
-                "user_link_flags",
-                "linker_subsystem_flag",
-                "linker_param_file",
-                "msvc_env",
-                "no_stripping",
-                "has_configured_linker_path",
-                "def_file",
-            ],
-            tools = [tool(path = ctx.attr.msvc_link_path)],
-        )
-
-        action_configs = [
-            assemble_action,
-            preprocess_assemble_action,
-            c_compile_action,
-            linkstamp_compile_action,
-            cpp_compile_action,
-            cpp_link_executable_action,
-            cpp_link_dynamic_library_action,
-            cpp_link_nodeps_dynamic_library_action,
-            cpp_link_static_library_action,
-        ]
-    else:
-        action_configs = []
-
-    if _use_msvc_toolchain(ctx):
-        msvc_link_env_feature = feature(
-            name = "msvc_link_env",
-            env_sets = [
-                env_set(
-                    actions = all_link_actions +
-                              [ACTION_NAMES.cpp_link_static_library],
-                    env_entries = [env_entry(key = "LIB", value = ctx.attr.msvc_env_lib)],
-                ),
-            ],
-        )
-
-        shared_flag_feature = feature(
-            name = "shared_flag",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                    ],
-                    flag_groups = [flag_group(flags = ["/DLL"])],
-                ),
-            ],
-        )
-
-        determinism_feature = feature(
-            name = "determinism",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [
-                        flag_group(
-                            flags = [
-                                "/wd4117",
-                                "-D__DATE__=\"redacted\"",
-                                "-D__TIMESTAMP__=\"redacted\"",
-                                "-D__TIME__=\"redacted\"",
-                            ] + (["-Wno-builtin-macro-redefined"] if ctx.attr.compiler == "clang-cl" else []),
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        sysroot_feature = feature(
-            name = "sysroot",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.cpp_link_executable,
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["--sysroot=%{sysroot}"],
-                            iterate_over = "sysroot",
-                            expand_if_available = "sysroot",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        unfiltered_compile_flags_feature = feature(
-            name = "unfiltered_compile_flags",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["%{unfiltered_compile_flags}"],
-                            iterate_over = "unfiltered_compile_flags",
-                            expand_if_available = "unfiltered_compile_flags",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        archive_param_file_feature = feature(
-            name = "archive_param_file",
-        )
-
-        compiler_param_file_feature = feature(
-            name = "compiler_param_file",
-        )
-
-        copy_dynamic_libraries_to_binary_feature = feature(
-            name = "copy_dynamic_libraries_to_binary",
-        )
-
-        input_param_flags_feature = feature(
-            name = "input_param_flags",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/IMPLIB:%{interface_library_output_path}"],
-                            expand_if_available = "interface_library_output_path",
-                        ),
-                    ],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = ["%{libopts}"],
-                            iterate_over = "libopts",
-                            expand_if_available = "libopts",
-                        ),
-                    ],
-                ),
-                flag_set(
-                    actions = all_link_actions +
-                              [ACTION_NAMES.cpp_link_static_library],
-                    flag_groups = [
-                        flag_group(
-                            iterate_over = "libraries_to_link",
-                            flag_groups = [
-                                flag_group(
-                                    iterate_over = "libraries_to_link.object_files",
-                                    flag_groups = [flag_group(flags = ["%{libraries_to_link.object_files}"])],
-                                    expand_if_equal = variable_with_value(
-                                        name = "libraries_to_link.type",
-                                        value = "object_file_group",
-                                    ),
-                                ),
-                                flag_group(
-                                    flag_groups = [flag_group(flags = ["%{libraries_to_link.name}"])],
-                                    expand_if_equal = variable_with_value(
-                                        name = "libraries_to_link.type",
-                                        value = "object_file",
-                                    ),
-                                ),
-                                flag_group(
-                                    flag_groups = [flag_group(flags = ["%{libraries_to_link.name}"])],
-                                    expand_if_equal = variable_with_value(
-                                        name = "libraries_to_link.type",
-                                        value = "interface_library",
-                                    ),
-                                ),
-                                flag_group(
-                                    flag_groups = [
-                                        flag_group(
-                                            flags = ["%{libraries_to_link.name}"],
-                                            expand_if_false = "libraries_to_link.is_whole_archive",
-                                        ),
-                                        flag_group(
-                                            flags = ["/WHOLEARCHIVE:%{libraries_to_link.name}"],
-                                            expand_if_true = "libraries_to_link.is_whole_archive",
-                                        ),
-                                    ],
-                                    expand_if_equal = variable_with_value(
-                                        name = "libraries_to_link.type",
-                                        value = "static_library",
-                                    ),
-                                ),
-                            ],
-                            expand_if_available = "libraries_to_link",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        fastbuild_feature = feature(
-            name = "fastbuild",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/Od", "/Z7"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = [ctx.attr.fastbuild_mode_debug_flag, "/INCREMENTAL:NO"],
-                        ),
-                    ],
-                ),
-            ],
-            implies = ["generate_pdb_file"],
-        )
-
-        user_compile_flags_feature = feature(
-            name = "user_compile_flags",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["%{user_compile_flags}"],
-                            iterate_over = "user_compile_flags",
-                            expand_if_available = "user_compile_flags",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        archiver_flags_feature = feature(
-            name = "archiver_flags",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.cpp_link_static_library],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/OUT:%{output_execpath}"],
-                            expand_if_available = "output_execpath",
-                        ),
-                        flag_group(
-                            flags = ctx.attr.archiver_flags,
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        default_link_flags_feature = feature(
-            name = "default_link_flags",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ctx.attr.default_link_flags)],
-                ),
-            ],
-        )
-
-        static_link_msvcrt_feature = feature(
-            name = "static_link_msvcrt",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/MT"])],
-                    with_features = [with_feature_set(not_features = ["dbg"])],
-                ),
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/MTd"])],
-                    with_features = [with_feature_set(features = ["dbg"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/DEFAULTLIB:libcmt.lib"])],
-                    with_features = [with_feature_set(not_features = ["dbg"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/DEFAULTLIB:libcmtd.lib"])],
-                    with_features = [with_feature_set(features = ["dbg"])],
-                ),
-            ],
-        )
-
-        dynamic_link_msvcrt_feature = feature(
-            name = "dynamic_link_msvcrt",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/MD"])],
-                    with_features = [with_feature_set(not_features = ["dbg", "static_link_msvcrt"])],
-                ),
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/MDd"])],
-                    with_features = [with_feature_set(features = ["dbg"], not_features = ["static_link_msvcrt"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/DEFAULTLIB:msvcrt.lib"])],
-                    with_features = [with_feature_set(not_features = ["dbg", "static_link_msvcrt"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/DEFAULTLIB:msvcrtd.lib"])],
-                    with_features = [with_feature_set(features = ["dbg"], not_features = ["static_link_msvcrt"])],
-                ),
-            ],
-        )
-
-        dbg_feature = feature(
-            name = "dbg",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/Od", "/Z7"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = [ctx.attr.dbg_mode_debug_flag, "/INCREMENTAL:NO"],
-                        ),
-                    ],
-                ),
-            ],
-            implies = ["generate_pdb_file"],
-        )
-
-        opt_feature = feature(
-            name = "opt",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/O2"])],
-                ),
-            ],
-            implies = ["frame_pointer"],
-        )
-
-        supports_interface_shared_libraries_feature = feature(
-            name = "supports_interface_shared_libraries",
-            enabled = True,
-        )
-
-        user_link_flags_feature = feature(
-            name = "user_link_flags",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = ["%{user_link_flags}"],
-                            iterate_over = "user_link_flags",
-                            expand_if_available = "user_link_flags",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        default_compile_flags_feature = feature(
-            name = "default_compile_flags",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.lto_backend,
-                        ACTION_NAMES.clif_match,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = [
-                                "/DCOMPILER_MSVC",
-                                "/DNOMINMAX",
-                                "/D_WIN32_WINNT=0x0601",
-                                "/D_CRT_SECURE_NO_DEPRECATE",
-                                "/D_CRT_SECURE_NO_WARNINGS",
-                                "/bigobj",
-                                "/Zm500",
-                                "/EHsc",
-                                "/wd4351",
-                                "/wd4291",
-                                "/wd4250",
-                                "/wd4996",
-                            ],
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        msvc_compile_env_feature = feature(
-            name = "msvc_compile_env",
-            env_sets = [
-                env_set(
-                    actions = [
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                    ],
-                    env_entries = [env_entry(key = "INCLUDE", value = ctx.attr.msvc_env_include)],
-                ),
-            ],
-        )
-
-        preprocessor_defines_feature = feature(
-            name = "preprocessor_defines",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/D%{preprocessor_defines}"],
-                            iterate_over = "preprocessor_defines",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        generate_pdb_file_feature = feature(
-            name = "generate_pdb_file",
-        )
-
-        output_execpath_flags_feature = feature(
-            name = "output_execpath_flags",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/OUT:%{output_execpath}"],
-                            expand_if_available = "output_execpath",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        disable_assertions_feature = feature(
-            name = "disable_assertions",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/DNDEBUG"])],
-                    with_features = [with_feature_set(features = ["opt"])],
-                ),
-            ],
-        )
-
-        has_configured_linker_path_feature = feature(name = "has_configured_linker_path")
-
-        supports_dynamic_linker_feature = feature(name = "supports_dynamic_linker", enabled = True)
-
-        no_stripping_feature = feature(name = "no_stripping")
-
-        linker_param_file_feature = feature(
-            name = "linker_param_file",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions +
-                              [ACTION_NAMES.cpp_link_static_library],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["@%{linker_param_file}"],
-                            expand_if_available = "linker_param_file",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        ignore_noisy_warnings_feature = feature(
-            name = "ignore_noisy_warnings",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.cpp_link_static_library],
-                    flag_groups = [flag_group(flags = ["/ignore:4221"])],
-                ),
-            ],
-        )
-
-        no_legacy_features_feature = feature(name = "no_legacy_features")
-
-        parse_showincludes_feature = feature(
-            name = "parse_showincludes",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                    ],
-                    flag_groups = [flag_group(flags = ["/showIncludes"])],
-                ),
-            ],
-        )
-
-        treat_warnings_as_errors_feature = feature(
-            name = "treat_warnings_as_errors",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile] + all_link_actions,
-                    flag_groups = [flag_group(flags = ["/WX"])],
-                ),
-            ],
-        )
-
-        windows_export_all_symbols_feature = feature(name = "windows_export_all_symbols")
-
-        no_windows_export_all_symbols_feature = feature(name = "no_windows_export_all_symbols")
-
-        include_paths_feature = feature(
-            name = "include_paths",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/I%{quote_include_paths}"],
-                            iterate_over = "quote_include_paths",
-                        ),
-                        flag_group(
-                            flags = ["/I%{include_paths}"],
-                            iterate_over = "include_paths",
-                        ),
-                        flag_group(
-                            flags = ["/I%{system_include_paths}"],
-                            iterate_over = "system_include_paths",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        linkstamps_feature = feature(
-            name = "linkstamps",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = ["%{linkstamp_paths}"],
-                            iterate_over = "linkstamp_paths",
-                            expand_if_available = "linkstamp_paths",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        targets_windows_feature = feature(
-            name = "targets_windows",
-            enabled = True,
-            implies = ["copy_dynamic_libraries_to_binary"],
-        )
-
-        linker_subsystem_flag_feature = feature(
-            name = "linker_subsystem_flag",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/SUBSYSTEM:CONSOLE"])],
-                ),
-            ],
-        )
-
-        frame_pointer_feature = feature(
-            name = "frame_pointer",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/Oy-"])],
-                ),
-            ],
-        )
-
-        compiler_output_flags_feature = feature(
-            name = "compiler_output_flags",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.assemble],
-                    flag_groups = [
-                        flag_group(
-                            flag_groups = [
-                                flag_group(
-                                    flags = ["/Fo%{output_file}", "/Zi"],
-                                    expand_if_available = "output_file",
-                                    expand_if_not_available = "output_assembly_file",
-                                ),
-                            ],
-                            expand_if_not_available = "output_preprocess_file",
-                        ),
-                    ],
-                ),
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flag_groups = [
-                                flag_group(
-                                    flags = ["/Fo%{output_file}"],
-                                    expand_if_not_available = "output_preprocess_file",
-                                ),
-                            ],
-                            expand_if_available = "output_file",
-                            expand_if_not_available = "output_assembly_file",
-                        ),
-                        flag_group(
-                            flag_groups = [
-                                flag_group(
-                                    flags = ["/Fa%{output_file}"],
-                                    expand_if_available = "output_assembly_file",
-                                ),
-                            ],
-                            expand_if_available = "output_file",
-                        ),
-                        flag_group(
-                            flag_groups = [
-                                flag_group(
-                                    flags = ["/P", "/Fi%{output_file}"],
-                                    expand_if_available = "output_preprocess_file",
-                                ),
-                            ],
-                            expand_if_available = "output_file",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        nologo_feature = feature(
-            name = "nologo",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.cpp_link_executable,
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                        ACTION_NAMES.cpp_link_static_library,
-                    ],
-                    flag_groups = [flag_group(flags = ["/nologo"])],
-                ),
-            ],
-        )
-
-        smaller_binary_feature = feature(
-            name = "smaller_binary",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["/Gy", "/Gw"])],
-                    with_features = [with_feature_set(features = ["opt"])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["/OPT:ICF", "/OPT:REF"])],
-                    with_features = [with_feature_set(features = ["opt"])],
-                ),
-            ],
-        )
-
-        compiler_input_flags_feature = feature(
-            name = "compiler_input_flags",
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                    ],
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/c", "%{source_file}"],
-                            expand_if_available = "source_file",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        def_file_feature = feature(
-            name = "def_file",
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [
-                        flag_group(
-                            flags = ["/DEF:%{def_file_path}", "/ignore:4070"],
-                            expand_if_available = "def_file_path",
-                        ),
-                    ],
-                ),
-            ],
-        )
-
-        msvc_env_feature = feature(
-            name = "msvc_env",
-            env_sets = [
-                env_set(
-                    actions = [
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.cpp_link_executable,
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                        ACTION_NAMES.cpp_link_static_library,
-                    ],
-                    env_entries = [
-                        env_entry(key = "PATH", value = ctx.attr.msvc_env_path),
-                        env_entry(key = "TMP", value = ctx.attr.msvc_env_tmp),
-                        env_entry(key = "TEMP", value = ctx.attr.msvc_env_tmp),
-                    ],
-                ),
-            ],
-            implies = ["msvc_compile_env", "msvc_link_env"],
-        )
-        features = [
-            no_legacy_features_feature,
-            nologo_feature,
-            has_configured_linker_path_feature,
-            no_stripping_feature,
-            targets_windows_feature,
-            copy_dynamic_libraries_to_binary_feature,
-            default_compile_flags_feature,
-            msvc_env_feature,
-            msvc_compile_env_feature,
-            msvc_link_env_feature,
-            include_paths_feature,
-            preprocessor_defines_feature,
-            parse_showincludes_feature,
-            generate_pdb_file_feature,
-            shared_flag_feature,
-            linkstamps_feature,
-            output_execpath_flags_feature,
-            archiver_flags_feature,
-            input_param_flags_feature,
-            linker_subsystem_flag_feature,
-            user_link_flags_feature,
-            default_link_flags_feature,
-            linker_param_file_feature,
-            static_link_msvcrt_feature,
-            dynamic_link_msvcrt_feature,
-            dbg_feature,
-            fastbuild_feature,
-            opt_feature,
-            frame_pointer_feature,
-            disable_assertions_feature,
-            determinism_feature,
-            treat_warnings_as_errors_feature,
-            smaller_binary_feature,
-            ignore_noisy_warnings_feature,
-            user_compile_flags_feature,
-            sysroot_feature,
-            unfiltered_compile_flags_feature,
-            archive_param_file_feature,
-            compiler_param_file_feature,
-            compiler_output_flags_feature,
-            compiler_input_flags_feature,
-            def_file_feature,
-            windows_export_all_symbols_feature,
-            no_windows_export_all_symbols_feature,
-            supports_dynamic_linker_feature,
-            supports_interface_shared_libraries_feature,
-        ]
-    else:
-        targets_windows_feature = feature(
-            name = "targets_windows",
-            implies = ["copy_dynamic_libraries_to_binary"],
-            enabled = True,
-        )
-
-        copy_dynamic_libraries_to_binary_feature = feature(name = "copy_dynamic_libraries_to_binary")
-
-        gcc_env_feature = feature(
-            name = "gcc_env",
-            enabled = True,
-            env_sets = [
-                env_set(
-                    actions = [
-                        ACTION_NAMES.c_compile,
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.assemble,
-                        ACTION_NAMES.preprocess_assemble,
-                        ACTION_NAMES.cpp_link_executable,
-                        ACTION_NAMES.cpp_link_dynamic_library,
-                        ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                        ACTION_NAMES.cpp_link_static_library,
-                    ],
-                    env_entries = [
-                        env_entry(key = "PATH", value = ctx.attr.tool_bin_path),
-                    ],
-                ),
-            ],
-        )
-
-        default_compile_flags_feature = feature(
-            name = "default_compile_flags",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = [
-                        ACTION_NAMES.linkstamp_compile,
-                        ACTION_NAMES.cpp_compile,
-                        ACTION_NAMES.cpp_header_parsing,
-                        ACTION_NAMES.cpp_module_compile,
-                        ACTION_NAMES.cpp_module_codegen,
-                        ACTION_NAMES.lto_backend,
-                        ACTION_NAMES.clif_match,
-                    ],
-                    flag_groups = [flag_group(flags = ["-std=gnu++0x"])],
-                ),
-            ],
-        )
-
-        default_link_flags_feature = feature(
-            name = "default_link_flags",
-            enabled = True,
-            flag_sets = [
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["-lstdc++"])],
-                ),
-            ],
-        )
-
-        supports_dynamic_linker_feature = feature(
-            name = "supports_dynamic_linker",
-            enabled = True,
-        )
-
-        dbg_feature = feature(
-            name = "dbg",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = ["-g", "-Og"])],
-                ),
-            ],
-        )
-
-        opt_feature = feature(
-            name = "opt",
-            flag_sets = [
-                flag_set(
-                    actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                    flag_groups = [flag_group(flags = [
-                        "-g0",
-                        "-O3",
-                        "-DNDEBUG",
-                        "-ffunction-sections",
-                        "-fdata-sections",
-                    ])],
-                ),
-                flag_set(
-                    actions = all_link_actions,
-                    flag_groups = [flag_group(flags = ["-Wl,--gc-sections"])],
-                ),
-            ],
-        )
-
-        if ctx.attr.cpu == "x64_windows" and ctx.attr.compiler == "mingw-gcc":
-            archive_param_file_feature = feature(
-                name = "archive_param_file",
-            )
-
-            compiler_param_file_feature = feature(
-                name = "compiler_param_file",
-            )
-
-            features = [
-                targets_windows_feature,
-                copy_dynamic_libraries_to_binary_feature,
-                gcc_env_feature,
-                default_compile_flags_feature,
-                archive_param_file_feature,
-                compiler_param_file_feature,
-                default_link_flags_feature,
-                supports_dynamic_linker_feature,
-                dbg_feature,
-                opt_feature,
-            ]
-        else:
-            supports_pic_feature = feature(
-                name = "supports_pic",
-                enabled = True,
-            )
-
-            sysroot_feature = feature(
-                name = "sysroot",
-                enabled = True,
-                flag_sets = [
-                    flag_set(
-                        actions = [
-                            ACTION_NAMES.preprocess_assemble,
-                            ACTION_NAMES.linkstamp_compile,
-                            ACTION_NAMES.c_compile,
-                            ACTION_NAMES.cpp_compile,
-                            ACTION_NAMES.cpp_header_parsing,
-                            ACTION_NAMES.cpp_module_compile,
-                            ACTION_NAMES.cpp_module_codegen,
-                            ACTION_NAMES.lto_backend,
-                            ACTION_NAMES.clif_match,
-                            ACTION_NAMES.cpp_link_executable,
-                            ACTION_NAMES.cpp_link_dynamic_library,
-                            ACTION_NAMES.cpp_link_nodeps_dynamic_library,
-                        ],
-                        flag_groups = [
-                            flag_group(
-                                flags = ["--sysroot=%{sysroot}"],
-                                expand_if_available = "sysroot",
-                            ),
-                        ],
-                    ),
-                ],
-            )
-
-            fdo_optimize_feature = feature(
-                name = "fdo_optimize",
-                flag_sets = [
-                    flag_set(
-                        actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                        flag_groups = [
-                            flag_group(
-                                flags = [
-                                    "-fprofile-use=%{fdo_profile_path}",
-                                    "-fprofile-correction",
-                                ],
-                                expand_if_available = "fdo_profile_path",
-                            ),
-                        ],
-                    ),
-                ],
-                provides = ["profile"],
-            )
-
-            treat_warnings_as_errors_feature = feature(
-                name = "treat_warnings_as_errors",
-                flag_sets = [
-                    flag_set(
-                        actions = [ACTION_NAMES.c_compile, ACTION_NAMES.cpp_compile],
-                        flag_groups = [flag_group(flags = ["-Werror"])],
-                    ),
-                    flag_set(
-                        actions = all_link_actions,
-                        flag_groups = [flag_group(flags = ["-Wl,-fatal-warnings"])],
-                    ),
-                ],
-            )
-
-            user_compile_flags_feature = feature(
-                name = "user_compile_flags",
-                enabled = True,
-                flag_sets = [
-                    flag_set(
-                        actions = [
-                            ACTION_NAMES.assemble,
-                            ACTION_NAMES.preprocess_assemble,
-                            ACTION_NAMES.linkstamp_compile,
-                            ACTION_NAMES.c_compile,
-                            ACTION_NAMES.cpp_compile,
-                            ACTION_NAMES.cpp_header_parsing,
-                            ACTION_NAMES.cpp_module_compile,
-                            ACTION_NAMES.cpp_module_codegen,
-                            ACTION_NAMES.lto_backend,
-                            ACTION_NAMES.clif_match,
-                        ],
-                        flag_groups = [
-                            flag_group(
-                                flags = ["%{user_compile_flags}"],
-                                iterate_over = "user_compile_flags",
-                                expand_if_available = "user_compile_flags",
-                            ),
-                        ],
-                    ),
-                ],
-            )
-
-            features = [
-                targets_windows_feature,
-                copy_dynamic_libraries_to_binary_feature,
-                gcc_env_feature,
-                supports_pic_feature,
-                default_compile_flags_feature,
-                default_link_flags_feature,
-                fdo_optimize_feature,
-                supports_dynamic_linker_feature,
-                dbg_feature,
-                opt_feature,
-                user_compile_flags_feature,
-                treat_warnings_as_errors_feature,
-                sysroot_feature,
-            ]
-
-    tool_paths = [
-        tool_path(name = name, path = path)
-        for name, path in ctx.attr.tool_paths.items()
-    ]
-
-    return cc_common.create_cc_toolchain_config_info(
-        ctx = ctx,
-        features = features,
-        action_configs = action_configs,
-        artifact_name_patterns = artifact_name_patterns,
-        cxx_builtin_include_directories = ctx.attr.cxx_builtin_include_directories,
-        toolchain_identifier = ctx.attr.toolchain_identifier,
-        host_system_name = ctx.attr.host_system_name,
-        target_system_name = ctx.attr.target_system_name,
-        target_cpu = ctx.attr.cpu,
-        target_libc = ctx.attr.target_libc,
-        compiler = ctx.attr.compiler,
-        abi_version = ctx.attr.abi_version,
-        abi_libc_version = ctx.attr.abi_libc_version,
-        tool_paths = tool_paths,
-    )
-
-cc_toolchain_config = rule(
-    implementation = _impl,
-    attrs = {
-        "cpu": attr.string(mandatory = True),
-        "compiler": attr.string(),
-        "toolchain_identifier": attr.string(),
-        "host_system_name": attr.string(),
-        "target_system_name": attr.string(),
-        "target_libc": attr.string(),
-        "abi_version": attr.string(),
-        "abi_libc_version": attr.string(),
-        "tool_paths": attr.string_dict(),
-        "cxx_builtin_include_directories": attr.string_list(),
-        "archiver_flags": attr.string_list(default = []),
-        "default_link_flags": attr.string_list(default = []),
-        "msvc_env_tmp": attr.string(default = "msvc_not_found"),
-        "msvc_env_path": attr.string(default = "msvc_not_found"),
-        "msvc_env_include": attr.string(default = "msvc_not_found"),
-        "msvc_env_lib": attr.string(default = "msvc_not_found"),
-        "msvc_cl_path": attr.string(default = "vc_installation_error.bat"),
-        "msvc_ml_path": attr.string(default = "vc_installation_error.bat"),
-        "msvc_link_path": attr.string(default = "vc_installation_error.bat"),
-        "msvc_lib_path": attr.string(default = "vc_installation_error.bat"),
-        "dbg_mode_debug_flag": attr.string(),
-        "fastbuild_mode_debug_flag": attr.string(),
-        "tool_bin_path": attr.string(default = "not_found"),
-    },
-    provides = [CcToolchainConfigInfo],
-)
diff --git a/tensorflow/tsl/platform/default/build_config.bzl b/tensorflow/tsl/platform/default/build_config.bzl
index c6b49ba7ca4..827e51a4a8d 100644
--- a/tensorflow/tsl/platform/default/build_config.bzl
+++ b/tensorflow/tsl/platform/default/build_config.bzl
@@ -401,13 +401,6 @@ def py_proto_library(
         # is not explicitly listed in py_libs. Instead, host system is assumed to
         # have grpc installed.

-    genproto_deps = []
-    for dep in deps:
-        if dep != "@com_google_protobuf//:protobuf_python":
-            genproto_deps.append(dep + "_genproto")
-        else:
-            genproto_deps.append("@com_google_protobuf//:well_known_types_py_pb2_genproto")
-
     proto_gen(
         name = name + "_genproto",
         srcs = srcs,
@@ -418,7 +411,7 @@ def py_proto_library(
         plugin_language = "grpc",
         protoc = protoc,
         visibility = ["//visibility:public"],
-        deps = genproto_deps,
+        deps = [s + "_genproto" for s in deps],
     )

     if default_runtime and not default_runtime in py_libs + deps:
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 80072dec290..3506f7d22c0 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -457,14 +457,14 @@ def _tf_repositories():
     tf_http_archive(
         name = "com_google_protobuf",
         patch_file = ["//third_party/protobuf:protobuf.patch"],
-        sha256 = "f66073dee0bc159157b0bd7f502d7d1ee0bc76b3c1eac9836927511bdc4b3fc1",
-        strip_prefix = "protobuf-3.21.9",
+        sha256 = "cfcba2df10feec52a84208693937c17a4b5df7775e1635c1e3baffc487b24c9b",
+        strip_prefix = "protobuf-3.9.2",
         system_build_file = "//third_party/systemlibs:protobuf.BUILD",
         system_link_files = {
             "//third_party/systemlibs:protobuf.bzl": "protobuf.bzl",
             "//third_party/systemlibs:protobuf_deps.bzl": "protobuf_deps.bzl",
         },
-        urls = tf_mirror_urls("https://github.com/protocolbuffers/protobuf/archive/v3.21.9.zip"),
+        urls = tf_mirror_urls("https://github.com/protocolbuffers/protobuf/archive/v3.9.2.zip"),
     )

     tf_http_archive(
@@ -485,9 +485,9 @@ def _tf_repositories():

     tf_http_archive(
         name = "com_google_fuzztest",
-        sha256 = "c75f224b34c3c62ee901381fb743f6326f7b91caae0ceb8fe62f3fd36f187627",
-        strip_prefix = "fuzztest-58b4e7065924f1a284952b84ea827ce35a87e4dc",
-        urls = tf_mirror_urls("https://github.com/google/fuzztest/archive/58b4e7065924f1a284952b84ea827ce35a87e4dc.zip"),
+        sha256 = "3fe79ede8e860ba7331987b2c1f84d3eeaf5bea00fd76398d6ff0006635586c6",
+        strip_prefix = "fuzztest-6d79ceb1dc2398e02a39efc23ce40d68baa16a42",
+        urls = tf_mirror_urls("https://github.com/google/fuzztest/archive/6d79ceb1dc2398e02a39efc23ce40d68baa16a42.zip"),
     )

     tf_http_archive(
@@ -567,10 +567,10 @@ def _tf_repositories():

     tf_http_archive(
         name = "boringssl",
-        sha256 = "534fa658bd845fd974b50b10f444d392dfd0d93768c4a51b61263fd37d851c40",
-        strip_prefix = "boringssl-b9232f9e27e5668bc0414879dcdedb2a59ea75f2",
+        sha256 = "fd0e06a8a57dcba1132f91fef1c1327191e913b6c50a84633f7175090972196c",
+        strip_prefix = "boringssl-f9eff21461cf79556a0fb8ca9b1bf60c3b283ce8",
         system_build_file = "//third_party/systemlibs:boringssl.BUILD",
-        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/b9232f9e27e5668bc0414879dcdedb2a59ea75f2.tar.gz"),
+        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/f9eff21461cf79556a0fb8ca9b1bf60c3b283ce8.tar.gz"),
     )

     # Note: if you update this, you have to update libpng too. See cl/437813808
@@ -873,13 +873,6 @@ def _tf_repositories():
         system_build_file = "//third_party/systemlibs:pybind11.BUILD",
     )

-    tf_http_archive(
-        name = "pybind11_protobuf",
-        urls = tf_mirror_urls("https://github.com/pybind/pybind11_protobuf/archive/80f3440cd8fee124e077e2e47a8a17b78b451363.zip"),
-        sha256 = "",
-        strip_prefix = "pybind11_protobuf-80f3440cd8fee124e077e2e47a8a17b78b451363",
-    )
-
     tf_http_archive(
         name = "wrapt",
         build_file = "//third_party:wrapt.BUILD",
diff --git a/tensorflow/workspace3.bzl b/tensorflow/workspace3.bzl
index 91871db22c8..5cfa0553579 100644
--- a/tensorflow/workspace3.bzl
+++ b/tensorflow/workspace3.bzl
@@ -37,11 +37,11 @@ def workspace():
     )

     # Maven dependencies.
-    RULES_JVM_EXTERNAL_TAG = "4.3"
+    RULES_JVM_EXTERNAL_TAG = "3.2"
     http_archive(
         name = "rules_jvm_external",
         strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
-        sha256 = "6274687f6fc5783b589f56a2f1ed60de3ce1f99bc4e8f9edef3de43bdf7c6e74",
+        sha256 = "82262ff4223c5fda6fb7ff8bd63db8131b51b413d26eb49e3131037e79e324af",
         url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
     )

diff --git a/third_party/pprof.BUILD b/third_party/pprof.BUILD
index b7d33118665..dd38a09cd0c 100644
--- a/third_party/pprof.BUILD
+++ b/third_party/pprof.BUILD
@@ -4,7 +4,7 @@ package(

 licenses(["notice"])  # MIT

-load("@org_tensorflow//tensorflow/tsl/platform/default:build_config.bzl", "py_proto_library")
+load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")

 exports_files(["pprof/LICENSE"])

diff --git a/third_party/protobuf/protobuf.patch b/third_party/protobuf/protobuf.patch
index 9d928ba175f..5ff9f425b76 100644
--- a/third_party/protobuf/protobuf.patch
+++ b/third_party/protobuf/protobuf.patch
@@ -1,30 +1,181 @@
-diff --git a/BUILD.bazel b/BUILD.bazel
---- a/BUILD.bazel	(revision 90b73ac3f0b10320315c2ca0d03a5a9b095d2f66)
-+++ b/BUILD.bazel	(date 1670471682469)
-@@ -68,6 +68,7 @@
+diff --git a/BUILD b/BUILD
+index dbae719ff..4e276c854 100644
+--- a/BUILD
++++ b/BUILD
+@@ -23,7 +23,7 @@ config_setting(
+ # ZLIB configuration
+ ################################################################################
+
+-ZLIB_DEPS = ["@zlib//:zlib"]
++ZLIB_DEPS = ["@zlib"]
+
+ ################################################################################
+ # Protobuf Runtime Library
+@@ -100,6 +100,7 @@ LINK_OPTS = select({
+
+ load(
+     ":protobuf.bzl",
++    "adapt_proto_library",
+     "cc_proto_library",
+     "py_proto_library",
+     "internal_copied_filegroup",
+@@ -143,6 +144,7 @@ cc_library(
      copts = COPTS,
      includes = ["src/"],
      linkopts = LINK_OPTS,
 +    alwayslink = 1,
      visibility = ["//visibility:public"],
  )
-
-@@ -135,6 +136,7 @@
+
+@@ -213,6 +215,7 @@ cc_library(
      copts = COPTS,
      includes = ["src/"],
      linkopts = LINK_OPTS,
 +    alwayslink = 1,
      visibility = ["//visibility:public"],
-     deps = [":protobuf_lite"] + select({
-         "//build_defs:config_msvc": [],
+     deps = [":protobuf_lite"] + PROTOBUF_DEPS,
+ )
+@@ -255,13 +258,15 @@ filegroup(
+     visibility = ["//visibility:public"],
+ )
+
+-cc_proto_library(
++adapt_proto_library(
++    name = "cc_wkt_protos_genproto",
++    deps = [proto + "_proto" for proto in WELL_KNOWN_PROTO_MAP.keys()],
++    visibility = ["//visibility:public"],
++)
++
++cc_library(
+     name = "cc_wkt_protos",
+-    srcs = WELL_KNOWN_PROTOS,
+-    include = "src",
+-    default_runtime = ":protobuf",
+-    internal_bootstrap_hack = 1,
+-    protoc = ":protoc",
++    deprecation = "Only for backward compatibility. Do not use.",
+     visibility = ["//visibility:public"],
+ )
+
+@@ -978,10 +983,10 @@ cc_library(
+
+ proto_lang_toolchain(
+     name = "cc_toolchain",
++    blacklisted_protos = [proto + "_proto" for proto in WELL_KNOWN_PROTO_MAP.keys()],
+     command_line = "--cpp_out=$(OUT)",
+     runtime = ":protobuf",
+     visibility = ["//visibility:public"],
+-    blacklisted_protos = [":_internal_wkt_protos_genrule"],
+ )
+
+ proto_lang_toolchain(
+diff --git a/protobuf.bzl b/protobuf.bzl
+index e0653321f..4156a1275 100644
+--- a/protobuf.bzl
++++ b/protobuf.bzl
+@@ -1,4 +1,5 @@
+ load("@bazel_skylib//lib:versions.bzl", "versions")
++load("@rules_proto//proto:defs.bzl", "ProtoInfo")
+
+ def _GetPath(ctx, path):
+     if ctx.label.workspace_root:
+@@ -85,6 +86,8 @@ def _proto_gen_impl(ctx):
+     for dep in ctx.attr.deps:
+         import_flags += dep.proto.import_flags
+         deps += dep.proto.deps
++    import_flags = depset(import_flags).to_list()
++    deps = depset(deps).to_list()
+
+     if not ctx.attr.gen_cc and not ctx.attr.gen_py and not ctx.executable.plugin:
+         return struct(
+@@ -222,6 +225,29 @@ Args:
+   outs: a list of labels of the expected outputs from the protocol compiler.
+ """
+
++def _adapt_proto_library_impl(ctx):
++    deps = [dep[ProtoInfo] for dep in ctx.attr.deps]
++
++    srcs = [src for dep in deps for src in dep.direct_sources]
++    return struct(
++        proto = struct(
++            srcs = srcs,
++            import_flags = ["-I{}".format(path) for dep in deps for path in dep.transitive_proto_path.to_list()],
++            deps = srcs,
++        ),
++    )
++
++adapt_proto_library = rule(
++    implementation = _adapt_proto_library_impl,
++    attrs = {
++        "deps": attr.label_list(
++            mandatory = True,
++            providers = [ProtoInfo],
++        ),
++    },
++    doc = "Adapts `proto_library` from `@rules_proto` to be used with `{cc,py}_proto_library` from this file.",
++)
++
+ def cc_proto_library(
+         name,
+         srcs = [],
+@@ -229,7 +255,6 @@ def cc_proto_library(
+         cc_libs = [],
+         include = None,
+         protoc = "@com_google_protobuf//:protoc",
+-        internal_bootstrap_hack = False,
+         use_grpc_plugin = False,
+         default_runtime = "@com_google_protobuf//:protobuf",
+         **kargs):
+@@ -247,41 +272,17 @@ def cc_proto_library(
+           cc_library.
+       include: a string indicating the include path of the .proto files.
+       protoc: the label of the protocol compiler to generate the sources.
+-      internal_bootstrap_hack: a flag indicate the cc_proto_library is used only
+-          for bootstraping. When it is set to True, no files will be generated.
+-          The rule will simply be a provider for .proto files, so that other
+-          cc_proto_library can depend on it.
+       use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin
+           when processing the proto files.
+       default_runtime: the implicitly default runtime which will be depended on by
+           the generated cc_library target.
+       **kargs: other keyword arguments that are passed to cc_library.
+-
+     """
+
+     includes = []
+     if include != None:
+         includes = [include]
+
+-    if internal_bootstrap_hack:
+-        # For pre-checked-in generated files, we add the internal_bootstrap_hack
+-        # which will skip the codegen action.
+-        proto_gen(
+-            name = name + "_genproto",
+-            srcs = srcs,
+-            deps = [s + "_genproto" for s in deps],
+-            includes = includes,
+-            protoc = protoc,
+-            visibility = ["//visibility:public"],
+-        )
+-
+-        # An empty cc_library to make rule dependency consistent.
+-        native.cc_library(
+-            name = name,
+-            **kargs
+-        )
+-        return
+-
+     grpc_cpp_plugin = None
+     if use_grpc_plugin:
+         grpc_cpp_plugin = "//external:grpc_cpp_plugin"
 diff --git a/python/google/protobuf/pyext/descriptor.cc b/python/google/protobuf/pyext/descriptor.cc
-index 162531226..e93ec4809 100644
+index 1637f83a3..cb0033278 100644
 --- a/python/google/protobuf/pyext/descriptor.cc
 +++ b/python/google/protobuf/pyext/descriptor.cc
-@@ -58,6 +58,37 @@
-               : 0)                                               \
-        : PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
-
+@@ -63,6 +63,37 @@
+                        : PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
+ #endif
+
 +#if PY_VERSION_HEX < 0x030900B1 && !defined(PYPY_VERSION)
 +static PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)
 +{
@@ -59,7 +210,7 @@ index 162531226..e93ec4809 100644
  namespace google {
  namespace protobuf {
  namespace python {
-@@ -96,48 +127,66 @@ bool _CalledFromGeneratedFile(int stacklevel) {
+@@ -101,48 +132,65 @@ bool _CalledFromGeneratedFile(int stacklevel) {
    // This check is not critical and is somewhat difficult to implement correctly
    // in PyPy.
    PyFrameObject* frame = PyEval_GetFrame();
@@ -68,7 +219,7 @@ index 162531226..e93ec4809 100644
 +  PyObject* frame_locals = nullptr;
 +  bool result = false;
 +
-   if (frame == nullptr) {
+   if (frame == NULL) {
 -    return false;
 +    goto exit;
    }
@@ -78,16 +229,16 @@ index 162531226..e93ec4809 100644
 +    PyFrameObject* next_frame = PyFrame_GetBack(frame);
 +    Py_DECREF(frame);
 +    frame = next_frame;
-     if (frame == nullptr) {
+     if (frame == NULL) {
 -      return false;
 +      goto exit;
      }
    }
-
--  if (frame->f_code->co_filename == nullptr) {
+-
+-  if (frame->f_code->co_filename == NULL) {
 -    return false;
 +  frame_code = PyFrame_GetCode(frame);
-+  if (frame_code->co_filename == nullptr) {
++  if (frame_code->co_filename == NULL) {
 +    goto exit;
    }
    char* filename;
@@ -118,7 +269,7 @@ index 162531226..e93ec4809 100644
 -    return false;
 +    goto exit;
    }
-
+
 -  if (frame->f_globals != frame->f_locals) {
 +  frame_globals = PyFrame_GetGlobals(frame);
 +  frame_locals = PyFrame_GetLocals(frame);
@@ -137,5 +288,36 @@ index 162531226..e93ec4809 100644
 +  Py_XDECREF(frame);
 +  return result;
  }
+
+ // If the calling code is not a _pb2.py file, raise AttributeError.
+diff --git a/python/google/protobuf/pyext/message.cc b/python/google/protobuf/pyext/message.cc
+index 3530a9b37..c31fa8fcc 100644
+--- a/python/google/protobuf/pyext/message.cc
++++ b/python/google/protobuf/pyext/message.cc
+@@ -2991,8 +2991,12 @@ bool InitProto2MessageModule(PyObject *m) {
+         reinterpret_cast<PyObject*>(
+             &RepeatedCompositeContainer_Type));

- // If the calling code is not a _pb2.py file, raise AttributeError.
\ No newline at end of file
+-    // Register them as collections.Sequence
++    // Register them as MutableSequence.
++#if PY_MAJOR_VERSION >= 3
++    ScopedPyObjectPtr collections(PyImport_ImportModule("collections.abc"));
++#else
+     ScopedPyObjectPtr collections(PyImport_ImportModule("collections"));
++#endif
+     if (collections == NULL) {
+       return false;
+     }
+diff --git a/python/google/protobuf/pyext/unknown_fields.cc b/python/google/protobuf/pyext/unknown_fields.cc
+index c3679c0d3..e80a1d97a 100755
+--- a/python/google/protobuf/pyext/unknown_fields.cc
++++ b/python/google/protobuf/pyext/unknown_fields.cc
+@@ -221,7 +221,7 @@ const UnknownField* GetUnknownField(PyUnknownFieldRef* self) {
+                  "The parent message might be cleared.");
+     return NULL;
+   }
+-  ssize_t total_size = fields->field_count();
++  Py_ssize_t total_size = fields->field_count();
+   if (self->index >= total_size) {
+     PyErr_Format(PyExc_ValueError,
+                  "UnknownField does not exist. "
\ No newline at end of file
diff --git a/third_party/pybind11_protobuf/BUILD b/third_party/pybind11_protobuf/BUILD
deleted file mode 100644
index 3b946e563d4..00000000000
--- a/third_party/pybind11_protobuf/BUILD
+++ /dev/null
@@ -1,3 +0,0 @@
-# Necessary for bazel to recognize this as a package.
-
-# copybara:uncomment package(default_applicable_licenses = ["//tensorflow:license"])
