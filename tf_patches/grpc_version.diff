# Tensorflow's patch to update the protobuf will regress the XRT runtime.
diff --git a/tensorflow/compiler/xla/tests/build_defs.bzl b/tensorflow/compiler/xla/tests/build_defs.bzl
index 10b30f63755..306512e21b8 100644
--- a/tensorflow/compiler/xla/tests/build_defs.bzl
+++ b/tensorflow/compiler/xla/tests/build_defs.bzl
@@ -112,6 +112,7 @@ def xla_test(
     native.cc_library(
         name = "%s_lib" % name,
         srcs = srcs,
+        tags = tags,
         copts = copts,
         testonly = True,
         deps = deps,
diff --git a/tensorflow/tools/ci_build/release/requirements_common.txt b/tensorflow/tools/ci_build/release/requirements_common.txt
index 051387bf64e..be3f16a4edb 100644
--- a/tensorflow/tools/ci_build/release/requirements_common.txt
+++ b/tensorflow/tools/ci_build/release/requirements_common.txt
@@ -11,7 +11,7 @@ h5py ~= 3.8.0  # Earliest version for Python 3.11
 numpy ~= 1.22.0; python_version < '3.11'
 numpy ~= 1.23.2; python_version >= '3.11' # Earliest version for Python 3.11
 opt_einsum ~= 3.3.0
-protobuf ~= 3.20.3  # NOTE: Earliest version for Python 3.10
+protobuf ~= 3.19.3  # NOTE: Earliest version for Python 3.10
 six ~= 1.16.0
 termcolor ~= 2.1.1
 typing_extensions ~= 3.10.0.0
diff --git a/tensorflow/tools/def_file_filter/def_file_filter.py.tpl b/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
index 444c2d151ab..8e97ea56f9f 100644
--- a/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
+++ b/tensorflow/tools/def_file_filter/def_file_filter.py.tpl
@@ -288,21 +288,15 @@ def main():
     def_fp.write("\t ?NewSession@tensorflow@@YAPEAVSession@1@AEBUSessionOptions@1@@Z\n")
     def_fp.write("\t ??1SavedModelBundleInterface@tensorflow@@UEAA@XZ\n")
     def_fp.write("\t ?MaybeSavedModelDirectory@tensorflow@@YA_NAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z\n")
+    def_fp.write("\t ?_TensorShapeProto_default_instance_@tensorflow@@3VTensorShapeProtoDefaultTypeInternal@1@A\n")
+    def_fp.write("\t ?_GraphDef_default_instance_@tensorflow@@3VGraphDefDefaultTypeInternal@1@A\n")
     def_fp.write("\t ??_7HistogramProto@tensorflow@@6B@\n")
     def_fp.write("\t ??_7ConfigProto@tensorflow@@6B@\n") # for _pywrap_tfe
     def_fp.write("\t ??_7CoordinatedTask@tensorflow@@6B@\n") # for _pywrap_tfe
+    def_fp.write("\t ??0CoordinatedTask@tensorflow@@QEAA@XZ\n") # for _pywrap_tfe
     def_fp.write("\t ?InternalSwap@CoordinatedTask@tensorflow@@AEAAXPEAV12@@Z\n") # for _pywrap_tfe
     def_fp.write("\t ?kSeed@MixingHashState@hash_internal@lts_20220623@absl@@0QEBXEB\n") # for _pywrap_tfcompile
     def_fp.write("\t ?kEmptyGroup@container_internal@lts_20220623@absl@@3QBW4ctrl_t@123@B\n") # for _pywrap_tfcompile
-    def_fp.write("\t ??_7GraphDef@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7DeviceProperties@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7MetaGraphDef@tensorflow@@6B@\n")
-    def_fp.write("\t ??_7SavedModel@tensorflow@@6B@\n")
-    def_fp.write("\t ??0CoordinatedTask@tensorflow@@QEAA@XZ\n") # for _pywrap_tfe
-    def_fp.write("\t ?Set@ArenaStringPtr@internal@protobuf@google@@QEAAXAEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@PEAVArena@34@@Z\n") # _pywrap_tfe
-    def_fp.write("\t ??1CoordinatedTask@tensorflow@@UEAA@XZ\n") # for _pywrap_tfe
-    def_fp.write("\t ?CopyFrom@CoordinatedTask@tensorflow@@QEAAXAEBV12@@Z\n") # for _pywrap_tfe
-    def_fp.write("\t ??0CoordinatedTask@tensorflow@@IEAA@PEAVArena@protobuf@google@@_N@Z\n") # for _pywrap_tfe

     # Each symbols returned by undname matches the same position in candidates.
     # We compare on undname but use the decorated name from candidates.
diff --git a/tensorflow/tools/pip_package/setup.py b/tensorflow/tools/pip_package/setup.py
index cc17d57800e..329588662e9 100644
--- a/tensorflow/tools/pip_package/setup.py
+++ b/tensorflow/tools/pip_package/setup.py
@@ -104,7 +104,7 @@ REQUIRED_PACKAGES = [
     # See also: https://github.com/protocolbuffers/protobuf/issues/9954
     # See also: https://github.com/tensorflow/tensorflow/issues/56077
     # This is a temporary patch for now, to patch previous TF releases.
-    'protobuf>=3.20.3,<5.0.0dev,!=4.21.0,!=4.21.1,!=4.21.2,!=4.21.3,!=4.21.4,!=4.21.5',
+    'protobuf >= 3.9.2, < 3.20',
     'setuptools',
     'six >= 1.12.0',
     'termcolor >= 1.1.0',
diff --git a/tensorflow/tsl/platform/default/build_config.bzl b/tensorflow/tsl/platform/default/build_config.bzl
index c6b49ba7ca4..827e51a4a8d 100644
--- a/tensorflow/tsl/platform/default/build_config.bzl
+++ b/tensorflow/tsl/platform/default/build_config.bzl
@@ -401,13 +401,6 @@ def py_proto_library(
         # is not explicitly listed in py_libs. Instead, host system is assumed to
         # have grpc installed.

-    genproto_deps = []
-    for dep in deps:
-        if dep != "@com_google_protobuf//:protobuf_python":
-            genproto_deps.append(dep + "_genproto")
-        else:
-            genproto_deps.append("@com_google_protobuf//:well_known_types_py_pb2_genproto")
-
     proto_gen(
         name = name + "_genproto",
         srcs = srcs,
@@ -418,7 +411,7 @@ def py_proto_library(
         plugin_language = "grpc",
         protoc = protoc,
         visibility = ["//visibility:public"],
-        deps = genproto_deps,
+        deps = [s + "_genproto" for s in deps],
     )

     if default_runtime and not default_runtime in py_libs + deps:
diff --git a/tensorflow/workspace2.bzl b/tensorflow/workspace2.bzl
index 80072dec290..3506f7d22c0 100644
--- a/tensorflow/workspace2.bzl
+++ b/tensorflow/workspace2.bzl
@@ -457,14 +457,14 @@ def _tf_repositories():
     tf_http_archive(
         name = "com_google_protobuf",
         patch_file = ["//third_party/protobuf:protobuf.patch"],
-        sha256 = "f66073dee0bc159157b0bd7f502d7d1ee0bc76b3c1eac9836927511bdc4b3fc1",
-        strip_prefix = "protobuf-3.21.9",
+        sha256 = "cfcba2df10feec52a84208693937c17a4b5df7775e1635c1e3baffc487b24c9b",
+        strip_prefix = "protobuf-3.9.2",
         system_build_file = "//third_party/systemlibs:protobuf.BUILD",
         system_link_files = {
             "//third_party/systemlibs:protobuf.bzl": "protobuf.bzl",
             "//third_party/systemlibs:protobuf_deps.bzl": "protobuf_deps.bzl",
         },
-        urls = tf_mirror_urls("https://github.com/protocolbuffers/protobuf/archive/v3.21.9.zip"),
+        urls = tf_mirror_urls("https://github.com/protocolbuffers/protobuf/archive/v3.9.2.zip"),
     )

     tf_http_archive(
@@ -485,9 +485,9 @@ def _tf_repositories():

     tf_http_archive(
         name = "com_google_fuzztest",
-        sha256 = "c75f224b34c3c62ee901381fb743f6326f7b91caae0ceb8fe62f3fd36f187627",
-        strip_prefix = "fuzztest-58b4e7065924f1a284952b84ea827ce35a87e4dc",
-        urls = tf_mirror_urls("https://github.com/google/fuzztest/archive/58b4e7065924f1a284952b84ea827ce35a87e4dc.zip"),
+        sha256 = "3fe79ede8e860ba7331987b2c1f84d3eeaf5bea00fd76398d6ff0006635586c6",
+        strip_prefix = "fuzztest-6d79ceb1dc2398e02a39efc23ce40d68baa16a42",
+        urls = tf_mirror_urls("https://github.com/google/fuzztest/archive/6d79ceb1dc2398e02a39efc23ce40d68baa16a42.zip"),
     )

     tf_http_archive(
@@ -567,10 +567,10 @@ def _tf_repositories():

     tf_http_archive(
         name = "boringssl",
-        sha256 = "534fa658bd845fd974b50b10f444d392dfd0d93768c4a51b61263fd37d851c40",
-        strip_prefix = "boringssl-b9232f9e27e5668bc0414879dcdedb2a59ea75f2",
+        sha256 = "fd0e06a8a57dcba1132f91fef1c1327191e913b6c50a84633f7175090972196c",
+        strip_prefix = "boringssl-f9eff21461cf79556a0fb8ca9b1bf60c3b283ce8",
         system_build_file = "//third_party/systemlibs:boringssl.BUILD",
-        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/b9232f9e27e5668bc0414879dcdedb2a59ea75f2.tar.gz"),
+        urls = tf_mirror_urls("https://github.com/google/boringssl/archive/f9eff21461cf79556a0fb8ca9b1bf60c3b283ce8.tar.gz"),
     )

     # Note: if you update this, you have to update libpng too. See cl/437813808
@@ -873,13 +873,6 @@ def _tf_repositories():
         system_build_file = "//third_party/systemlibs:pybind11.BUILD",
     )

-    tf_http_archive(
-        name = "pybind11_protobuf",
-        urls = tf_mirror_urls("https://github.com/pybind/pybind11_protobuf/archive/80f3440cd8fee124e077e2e47a8a17b78b451363.zip"),
-        sha256 = "",
-        strip_prefix = "pybind11_protobuf-80f3440cd8fee124e077e2e47a8a17b78b451363",
-    )
-
     tf_http_archive(
         name = "wrapt",
         build_file = "//third_party:wrapt.BUILD",
diff --git a/tensorflow/workspace3.bzl b/tensorflow/workspace3.bzl
index 91871db22c8..5cfa0553579 100644
--- a/tensorflow/workspace3.bzl
+++ b/tensorflow/workspace3.bzl
@@ -37,11 +37,11 @@ def workspace():
     )

     # Maven dependencies.
-    RULES_JVM_EXTERNAL_TAG = "4.3"
+    RULES_JVM_EXTERNAL_TAG = "3.2"
     http_archive(
         name = "rules_jvm_external",
         strip_prefix = "rules_jvm_external-%s" % RULES_JVM_EXTERNAL_TAG,
-        sha256 = "6274687f6fc5783b589f56a2f1ed60de3ce1f99bc4e8f9edef3de43bdf7c6e74",
+        sha256 = "82262ff4223c5fda6fb7ff8bd63db8131b51b413d26eb49e3131037e79e324af",
         url = "https://github.com/bazelbuild/rules_jvm_external/archive/%s.zip" % RULES_JVM_EXTERNAL_TAG,
     )

diff --git a/third_party/pprof.BUILD b/third_party/pprof.BUILD
index b7d33118665..dd38a09cd0c 100644
--- a/third_party/pprof.BUILD
+++ b/third_party/pprof.BUILD
@@ -4,7 +4,7 @@ package(

 licenses(["notice"])  # MIT

-load("@org_tensorflow//tensorflow/tsl/platform/default:build_config.bzl", "py_proto_library")
+load("@com_google_protobuf//:protobuf.bzl", "py_proto_library")

 exports_files(["pprof/LICENSE"])

diff --git a/third_party/protobuf/protobuf.patch b/third_party/protobuf/protobuf.patch
index 9d928ba175f..5ff9f425b76 100644
--- a/third_party/protobuf/protobuf.patch
+++ b/third_party/protobuf/protobuf.patch
@@ -1,30 +1,181 @@
-diff --git a/BUILD.bazel b/BUILD.bazel
---- a/BUILD.bazel	(revision 90b73ac3f0b10320315c2ca0d03a5a9b095d2f66)
-+++ b/BUILD.bazel	(date 1670471682469)
-@@ -68,6 +68,7 @@
+diff --git a/BUILD b/BUILD
+index dbae719ff..4e276c854 100644
+--- a/BUILD
++++ b/BUILD
+@@ -23,7 +23,7 @@ config_setting(
+ # ZLIB configuration
+ ################################################################################
+
+-ZLIB_DEPS = ["@zlib//:zlib"]
++ZLIB_DEPS = ["@zlib"]
+
+ ################################################################################
+ # Protobuf Runtime Library
+@@ -100,6 +100,7 @@ LINK_OPTS = select({
+
+ load(
+     ":protobuf.bzl",
++    "adapt_proto_library",
+     "cc_proto_library",
+     "py_proto_library",
+     "internal_copied_filegroup",
+@@ -143,6 +144,7 @@ cc_library(
      copts = COPTS,
      includes = ["src/"],
      linkopts = LINK_OPTS,
 +    alwayslink = 1,
      visibility = ["//visibility:public"],
  )
-
-@@ -135,6 +136,7 @@
+
+@@ -213,6 +215,7 @@ cc_library(
      copts = COPTS,
      includes = ["src/"],
      linkopts = LINK_OPTS,
 +    alwayslink = 1,
      visibility = ["//visibility:public"],
-     deps = [":protobuf_lite"] + select({
-         "//build_defs:config_msvc": [],
+     deps = [":protobuf_lite"] + PROTOBUF_DEPS,
+ )
+@@ -255,13 +258,15 @@ filegroup(
+     visibility = ["//visibility:public"],
+ )
+
+-cc_proto_library(
++adapt_proto_library(
++    name = "cc_wkt_protos_genproto",
++    deps = [proto + "_proto" for proto in WELL_KNOWN_PROTO_MAP.keys()],
++    visibility = ["//visibility:public"],
++)
++
++cc_library(
+     name = "cc_wkt_protos",
+-    srcs = WELL_KNOWN_PROTOS,
+-    include = "src",
+-    default_runtime = ":protobuf",
+-    internal_bootstrap_hack = 1,
+-    protoc = ":protoc",
++    deprecation = "Only for backward compatibility. Do not use.",
+     visibility = ["//visibility:public"],
+ )
+
+@@ -978,10 +983,10 @@ cc_library(
+
+ proto_lang_toolchain(
+     name = "cc_toolchain",
++    blacklisted_protos = [proto + "_proto" for proto in WELL_KNOWN_PROTO_MAP.keys()],
+     command_line = "--cpp_out=$(OUT)",
+     runtime = ":protobuf",
+     visibility = ["//visibility:public"],
+-    blacklisted_protos = [":_internal_wkt_protos_genrule"],
+ )
+
+ proto_lang_toolchain(
+diff --git a/protobuf.bzl b/protobuf.bzl
+index e0653321f..4156a1275 100644
+--- a/protobuf.bzl
++++ b/protobuf.bzl
+@@ -1,4 +1,5 @@
+ load("@bazel_skylib//lib:versions.bzl", "versions")
++load("@rules_proto//proto:defs.bzl", "ProtoInfo")
+
+ def _GetPath(ctx, path):
+     if ctx.label.workspace_root:
+@@ -85,6 +86,8 @@ def _proto_gen_impl(ctx):
+     for dep in ctx.attr.deps:
+         import_flags += dep.proto.import_flags
+         deps += dep.proto.deps
++    import_flags = depset(import_flags).to_list()
++    deps = depset(deps).to_list()
+
+     if not ctx.attr.gen_cc and not ctx.attr.gen_py and not ctx.executable.plugin:
+         return struct(
+@@ -222,6 +225,29 @@ Args:
+   outs: a list of labels of the expected outputs from the protocol compiler.
+ """
+
++def _adapt_proto_library_impl(ctx):
++    deps = [dep[ProtoInfo] for dep in ctx.attr.deps]
++
++    srcs = [src for dep in deps for src in dep.direct_sources]
++    return struct(
++        proto = struct(
++            srcs = srcs,
++            import_flags = ["-I{}".format(path) for dep in deps for path in dep.transitive_proto_path.to_list()],
++            deps = srcs,
++        ),
++    )
++
++adapt_proto_library = rule(
++    implementation = _adapt_proto_library_impl,
++    attrs = {
++        "deps": attr.label_list(
++            mandatory = True,
++            providers = [ProtoInfo],
++        ),
++    },
++    doc = "Adapts `proto_library` from `@rules_proto` to be used with `{cc,py}_proto_library` from this file.",
++)
++
+ def cc_proto_library(
+         name,
+         srcs = [],
+@@ -229,7 +255,6 @@ def cc_proto_library(
+         cc_libs = [],
+         include = None,
+         protoc = "@com_google_protobuf//:protoc",
+-        internal_bootstrap_hack = False,
+         use_grpc_plugin = False,
+         default_runtime = "@com_google_protobuf//:protobuf",
+         **kargs):
+@@ -247,41 +272,17 @@ def cc_proto_library(
+           cc_library.
+       include: a string indicating the include path of the .proto files.
+       protoc: the label of the protocol compiler to generate the sources.
+-      internal_bootstrap_hack: a flag indicate the cc_proto_library is used only
+-          for bootstraping. When it is set to True, no files will be generated.
+-          The rule will simply be a provider for .proto files, so that other
+-          cc_proto_library can depend on it.
+       use_grpc_plugin: a flag to indicate whether to call the grpc C++ plugin
+           when processing the proto files.
+       default_runtime: the implicitly default runtime which will be depended on by
+           the generated cc_library target.
+       **kargs: other keyword arguments that are passed to cc_library.
+-
+     """
+
+     includes = []
+     if include != None:
+         includes = [include]
+
+-    if internal_bootstrap_hack:
+-        # For pre-checked-in generated files, we add the internal_bootstrap_hack
+-        # which will skip the codegen action.
+-        proto_gen(
+-            name = name + "_genproto",
+-            srcs = srcs,
+-            deps = [s + "_genproto" for s in deps],
+-            includes = includes,
+-            protoc = protoc,
+-            visibility = ["//visibility:public"],
+-        )
+-
+-        # An empty cc_library to make rule dependency consistent.
+-        native.cc_library(
+-            name = name,
+-            **kargs
+-        )
+-        return
+-
+     grpc_cpp_plugin = None
+     if use_grpc_plugin:
+         grpc_cpp_plugin = "//external:grpc_cpp_plugin"
 diff --git a/python/google/protobuf/pyext/descriptor.cc b/python/google/protobuf/pyext/descriptor.cc
-index 162531226..e93ec4809 100644
+index 1637f83a3..cb0033278 100644
 --- a/python/google/protobuf/pyext/descriptor.cc
 +++ b/python/google/protobuf/pyext/descriptor.cc
-@@ -58,6 +58,37 @@
-               : 0)                                               \
-        : PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
-
+@@ -63,6 +63,37 @@
+                        : PyBytes_AsStringAndSize(ob, (charpp), (sizep)))
+ #endif
+
 +#if PY_VERSION_HEX < 0x030900B1 && !defined(PYPY_VERSION)
 +static PyCodeObject* PyFrame_GetCode(PyFrameObject *frame)
 +{
@@ -59,7 +210,7 @@ index 162531226..e93ec4809 100644
  namespace google {
  namespace protobuf {
  namespace python {
-@@ -96,48 +127,66 @@ bool _CalledFromGeneratedFile(int stacklevel) {
+@@ -101,48 +132,65 @@ bool _CalledFromGeneratedFile(int stacklevel) {
    // This check is not critical and is somewhat difficult to implement correctly
    // in PyPy.
    PyFrameObject* frame = PyEval_GetFrame();
@@ -68,7 +219,7 @@ index 162531226..e93ec4809 100644
 +  PyObject* frame_locals = nullptr;
 +  bool result = false;
 +
-   if (frame == nullptr) {
+   if (frame == NULL) {
 -    return false;
 +    goto exit;
    }
@@ -78,16 +229,16 @@ index 162531226..e93ec4809 100644
 +    PyFrameObject* next_frame = PyFrame_GetBack(frame);
 +    Py_DECREF(frame);
 +    frame = next_frame;
-     if (frame == nullptr) {
+     if (frame == NULL) {
 -      return false;
 +      goto exit;
      }
    }
-
--  if (frame->f_code->co_filename == nullptr) {
+-
+-  if (frame->f_code->co_filename == NULL) {
 -    return false;
 +  frame_code = PyFrame_GetCode(frame);
-+  if (frame_code->co_filename == nullptr) {
++  if (frame_code->co_filename == NULL) {
 +    goto exit;
    }
    char* filename;
@@ -118,7 +269,7 @@ index 162531226..e93ec4809 100644
 -    return false;
 +    goto exit;
    }
-
+
 -  if (frame->f_globals != frame->f_locals) {
 +  frame_globals = PyFrame_GetGlobals(frame);
 +  frame_locals = PyFrame_GetLocals(frame);
@@ -137,5 +288,36 @@ index 162531226..e93ec4809 100644
 +  Py_XDECREF(frame);
 +  return result;
  }
+
+ // If the calling code is not a _pb2.py file, raise AttributeError.
+diff --git a/python/google/protobuf/pyext/message.cc b/python/google/protobuf/pyext/message.cc
+index 3530a9b37..c31fa8fcc 100644
+--- a/python/google/protobuf/pyext/message.cc
++++ b/python/google/protobuf/pyext/message.cc
+@@ -2991,8 +2991,12 @@ bool InitProto2MessageModule(PyObject *m) {
+         reinterpret_cast<PyObject*>(
+             &RepeatedCompositeContainer_Type));

- // If the calling code is not a _pb2.py file, raise AttributeError.
\ No newline at end of file
+-    // Register them as collections.Sequence
++    // Register them as MutableSequence.
++#if PY_MAJOR_VERSION >= 3
++    ScopedPyObjectPtr collections(PyImport_ImportModule("collections.abc"));
++#else
+     ScopedPyObjectPtr collections(PyImport_ImportModule("collections"));
++#endif
+     if (collections == NULL) {
+       return false;
+     }
+diff --git a/python/google/protobuf/pyext/unknown_fields.cc b/python/google/protobuf/pyext/unknown_fields.cc
+index c3679c0d3..e80a1d97a 100755
+--- a/python/google/protobuf/pyext/unknown_fields.cc
++++ b/python/google/protobuf/pyext/unknown_fields.cc
+@@ -221,7 +221,7 @@ const UnknownField* GetUnknownField(PyUnknownFieldRef* self) {
+                  "The parent message might be cleared.");
+     return NULL;
+   }
+-  ssize_t total_size = fields->field_count();
++  Py_ssize_t total_size = fields->field_count();
+   if (self->index >= total_size) {
+     PyErr_Format(PyExc_ValueError,
+                  "UnknownField does not exist. "
\ No newline at end of file
diff --git a/third_party/pybind11_protobuf/BUILD b/third_party/pybind11_protobuf/BUILD
deleted file mode 100644
index 3b946e563d4..00000000000
--- a/third_party/pybind11_protobuf/BUILD
+++ /dev/null
@@ -1,3 +0,0 @@
-# Necessary for bazel to recognize this as a package.
-
-# copybara:uncomment package(default_applicable_licenses = ["//tensorflow:license"])
