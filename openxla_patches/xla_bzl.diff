# Backport of https://github.com/openxla/xla/commit/6d8b5c0d98aad645debbaddcb9f332ff22c19581 after PyTorch/XLA has migrated to OpenXLA
# Enable PyTorch/XLA could use macro from `xla_cc_test`. Remove in next TF pin update.
diff --git a/xla/xla.bzl b/xla/xla.bzl
index 2628eb4b0..1a9078d71 100644
--- a/xla/xla.bzl
+++ b/xla/xla.bzl
@@ -2,9 +2,9 @@
 
 load(
     "@tsl//tsl:tsl.bzl",
-    "clean_dep",
     "if_tsl_link_protobuf",
     "tsl_copts",
+    _tsl_clean_dep = "clean_dep",
 )
 load(
     "@tsl//tsl/platform/default:cuda_build_defs.bzl",
@@ -22,6 +22,17 @@ load(
 def register_extension_info(**kwargs):
     pass
 
+def clean_dep(target):
+    """Returns string to 'target' in @{org_tensorflow,xla} repository.
+
+    This is distinct from the clean_dep which appears in @{org_tensorflow,tsl}.
+    TODO(ddunleavy,jakeharmon): figure out what to do with this after vendoring.
+    """
+
+    # A repo-relative label is resolved relative to the file in which the
+    # Label() call appears, i.e. @xla.
+    return str(Label(target))
+
 def xla_py_proto_library(**kwargs):
     # Note: we don't currently define a proto library target for Python in OSS.
     _ignore = kwargs
@@ -44,7 +55,7 @@ def xla_cc_binary(deps = None, copts = tsl_copts(), **kwargs):
     # TODO(ddunleavy): some of these should be removed from here and added to
     # specific targets.
     deps += [
-        clean_dep("@com_google_protobuf//:protobuf"),
+        _tsl_clean_dep("@com_google_protobuf//:protobuf"),
         "//xla:xla_proto_cc_impl",
         "//xla:xla_data_proto_cc_impl",
         "//xla/service:hlo_proto_cc_impl",
@@ -76,39 +87,41 @@ def xla_cc_test(
         deps = deps + if_tsl_link_protobuf(
                    [],
                    [
-                       clean_dep("@com_google_protobuf//:protobuf"),
+                       _tsl_clean_dep("@com_google_protobuf//:protobuf"),
                        # TODO(zacmustin): remove these in favor of more granular dependencies in each test.
-                       "//xla:xla_proto_cc_impl",
-                       "//xla:xla_data_proto_cc_impl",
-                       "//xla/service:hlo_proto_cc_impl",
-                       "//xla/service:memory_space_assignment_proto_cc_impl",
-                       "//xla/service/gpu:backend_configs_cc_impl",
-                       "//xla/stream_executor:dnn_proto_cc_impl",
-                       "//xla/stream_executor:stream_executor_impl",
-                       "//xla/stream_executor:device_id_utils",
-                       "//xla/stream_executor/gpu:gpu_cudamallocasync_allocator",
-                       "//xla/stream_executor/gpu:gpu_init_impl",
-                       "@tsl//tsl/profiler/utils:time_utils_impl",
-                       "@tsl//tsl/profiler/backends/cpu:annotation_stack_impl",
-                       "@tsl//tsl/profiler/backends/cpu:traceme_recorder_impl",
-                       "@tsl//tsl/protobuf:autotuning_proto_cc_impl",
-                       "@tsl//tsl/protobuf:dnn_proto_cc_impl",
-                       "@tsl//tsl/protobuf:protos_all_cc_impl",
-                       "@tsl//tsl/platform:env_impl",
-                       "@tsl//tsl/framework:allocator",
-                       "@tsl//tsl/framework:allocator_registry_impl",
-                       "@tsl//tsl/util:determinism",
+                       clean_dep("//xla:xla_proto_cc_impl"),
+                       clean_dep("//xla:xla_data_proto_cc_impl"),
+                       clean_dep("//xla/service:hlo_proto_cc_impl"),
+                       clean_dep("//xla/service:memory_space_assignment_proto_cc_impl"),
+                       clean_dep("//xla/service/gpu:backend_configs_cc_impl"),
+                       clean_dep("//xla/stream_executor:dnn_proto_cc_impl"),
+                       clean_dep("//xla/stream_executor:stream_executor_impl"),
+                       clean_dep("//xla/stream_executor:device_id_utils"),
+                       clean_dep("//xla/stream_executor/gpu:gpu_cudamallocasync_allocator"),
+                       clean_dep("//xla/stream_executor/gpu:gpu_init_impl"),
+                       clean_dep("@tsl//tsl/profiler/utils:time_utils_impl"),
+                       clean_dep("@tsl//tsl/profiler/backends/cpu:annotation_stack_impl"),
+                       clean_dep("@tsl//tsl/profiler/backends/cpu:traceme_recorder_impl"),
+                       clean_dep("@tsl//tsl/protobuf:autotuning_proto_cc_impl"),
+                       clean_dep("@tsl//tsl/protobuf:dnn_proto_cc_impl"),
+                       clean_dep("@tsl//tsl/protobuf:protos_all_cc_impl"),
+                       clean_dep("@tsl//tsl/platform:env_impl"),
+                       clean_dep("@tsl//tsl/framework:allocator"),
+                       clean_dep("@tsl//tsl/framework:allocator_registry_impl"),
+                       clean_dep("@tsl//tsl/util:determinism"),
                    ],
                ) +
                if_cuda_is_configured([
-                   "//xla/stream_executor/cuda:cuda_stream",
-                   "//xla/stream_executor/cuda:all_runtime",
-                   "//xla/stream_executor/cuda:stream_executor_cuda",
+                   clean_dep("//xla/stream_executor/gpu:gpu_init"),
+                   clean_dep("//xla/stream_executor:stream_executor_bundle"),
+                   clean_dep("//xla/stream_executor/gpu:gpu_stream"),
+                   clean_dep("//xla/stream_executor/platform"),
+                   clean_dep("//xla/stream_executor:cuda_platform"),
                ]) +
                if_rocm_is_configured([
-                   "//xla/stream_executor/gpu:gpu_stream",
-                   "//xla/stream_executor/rocm:all_runtime",
-                   "//xla/stream_executor/rocm:stream_executor_rocm",
+                   clean_dep("//xla/stream_executor/gpu:gpu_stream"),
+                   clean_dep("//xla/stream_executor/rocm:all_runtime"),
+                   clean_dep("//xla/stream_executor/rocm:stream_executor_rocm"),
                ]),
         exec_properties = tf_exec_properties(kwargs),
         **kwargs
@@ -117,4 +130,4 @@ def xla_cc_test(
 register_extension_info(
     extension = xla_cc_test,
     label_regex_for_dep = "{extension_name}",
-)
+)
\ No newline at end of file