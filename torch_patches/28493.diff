diff --git a/torch/multiprocessing/__init__.py b/torch/multiprocessing/__init__.py
index 5b15aaff17..a0c4f134fb 100644
--- a/torch/multiprocessing/__init__.py
+++ b/torch/multiprocessing/__init__.py
@@ -42,7 +42,7 @@ if sys.version_info < (3, 3):
 
 """Add helper function to spawn N processes and wait for completion of any of
 them. This depends `mp.get_context` which was added in Python 3.4."""
-from .spawn import spawn, SpawnContext, _supports_context  # noqa: F401
+from .spawn import spawn, SpawnContext, _supports_context, ProcessContext, start_processes  # noqa: F401
 
 
 if sys.platform == 'darwin' or sys.platform == 'win32':
diff --git a/torch/multiprocessing/spawn.py b/torch/multiprocessing/spawn.py
index e084333671..3da28aa59a 100644
--- a/torch/multiprocessing/spawn.py
+++ b/torch/multiprocessing/spawn.py
@@ -34,14 +34,14 @@ def _python_version_check():
     if not _supports_context:
         raise RuntimeError("Requires python 3.4 or higher to use "
                            "torch.multiprocessing.spawn and "
-                           "torch.multiprocessing.SpawnContext helper "
+                           "torch.multiprocessing.ProcessContext helper "
                            "to launch multiple processes. If you are using "
                            "this for distributed training and have a lower "
                            "version of python, please use "
                            "torch.distributed.launch instead.")
 
 
-class SpawnContext:
+class ProcessContext:
     def __init__(self, processes, error_queues):
         _python_version_check()
         self.error_queues = error_queues
@@ -117,6 +117,36 @@ class SpawnContext:
         msg += original_trace
         raise Exception(msg)
 
+class SpawnContext(ProcessContext):
+    def __init__(self, processes, error_queues):
+        warnings.warn('SpawnContext is renamed to ProcessContext since 1.4 release.')
+        super(SpawnContext, self).__init__(self, processes, error_queues)
+    pass
+
+
+def start_processes(fn, args=(), nprocs=1, join=True, daemon=False, start_method='spawn'):
+    _python_version_check()
+    mp = multiprocessing.get_context(start_method)
+    error_queues = []
+    processes = []
+    for i in range(nprocs):
+        error_queue = mp.SimpleQueue()
+        process = mp.Process(
+            target=_wrap,
+            args=(fn, i, args, error_queue),
+            daemon=daemon,
+        )
+        process.start()
+        error_queues.append(error_queue)
+        processes.append(process)
+
+    context = ProcessContext(processes, error_queues)
+    if not join:
+        return context
+
+    # Loop on join until it returns True or raises an exception.
+    while not context.join():
+        pass
 
 def spawn(fn, args=(), nprocs=1, join=True, daemon=False):
     r"""Spawns ``nprocs`` processes that run ``fn`` with ``args``.
@@ -148,25 +178,4 @@ def spawn(fn, args=(), nprocs=1, join=True, daemon=False):
         :class:`~SpawnContext` if ``join`` is ``False``
 
     """
-    _python_version_check()
-    mp = multiprocessing.get_context('spawn')
-    error_queues = []
-    processes = []
-    for i in range(nprocs):
-        error_queue = mp.SimpleQueue()
-        process = mp.Process(
-            target=_wrap,
-            args=(fn, i, args, error_queue),
-            daemon=daemon,
-        )
-        process.start()
-        error_queues.append(error_queue)
-        processes.append(process)
-
-    spawn_context = SpawnContext(processes, error_queues)
-    if not join:
-        return spawn_context
-
-    # Loop on join until it returns True or raises an exception.
-    while not spawn_context.join():
-        pass
+    return start_processes(fn, args, nprocs, join, daemon, start_method='spawn')
