name: xla-test-requiring-torch-cuda
on:
  workflow_call:
    inputs:
      dev-image:
        required: true
        type: string
        description: Base image for builds
      runner:
        required: false
        type: string
        description: Runner type for the test
        default: linux.12xlarge
      collect-coverage:
        required: false
        type: boolean
        description: Set to true to collect coverage information
        default: false
      timeout-minutes:
        required: false
        type: number
        default: 30
        description: |
          Set the maximum (in minutes) how long the workflow should take to finish
            timeout-minutes:
      torch-commit:
        required: true
        type: string
        description: torch-commit
      has_code_changes:
        required: false
        type: string
        description: Whether to run full workflow or not
        default: 'true'
jobs:
  test:
    container:
      image: ${{ inputs.dev-image }}
      options: "--gpus all --shm-size 16g"
    strategy:
      matrix:
        include:
          - run_python_tests: 'python_tests'
            runner: ${{ inputs.runner }}
          - run_triton_tests: 'triton_tests'
            runner: 'linux.g5.4xlarge.nvidia.gpu'
    runs-on: ${{ matrix.runner }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    env:
      USE_COVERAGE: ${{ inputs.collect-coverage && '1' || '0' }}
      BAZEL_JOBS: 16
      BAZEL_REMOTE_CACHE: 1
    steps:
      - name: Checkout actions
        if: inputs.has_code_changes == 'true'
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/workflows/setup
          path: .actions
      - name: Setup
        if: inputs.has_code_changes == 'true'
        uses: ./.actions/.github/workflows/setup
        with:
          torch-commit: ${{ inputs.torch-commit }}
          cuda: true
          wheels-artifact: torch-xla-wheels
          cuda-plugin-artifact: cuda-plugin
          cuda-torch-artifact: torch-with-cuda
      - name: Check GPU
        if: inputs.has_code_changes == 'true'
        run: nvidia-smi
      - name: Install wheels
        if: inputs.has_code_changes == 'true'
        shell: bash
        run: |
          pip install /tmp/wheels/*.whl
          # TODO: Add these in setup.py
          pip install fsspec
          pip install rich

          echo "Import check..."
          python -c "import torch, torch_xla, torchvision"
          echo "Import check done."
          echo "Check if CUDA is available for PyTorch..."
          python -c "import torch; assert torch.cuda.is_available()"
          echo "CUDA is available for PyTorch."
      - name: Checkout PyTorch Repo
        if: inputs.has_code_changes == 'true'
        uses: actions/checkout@v4
        with:
          repository: pytorch/pytorch
          path: pytorch
          ref: ${{ inputs.torch-commit }}
      - name: Checkout PyTorch/XLA Repo
        if: inputs.has_code_changes == 'true'
        uses: actions/checkout@v4
        with:
          path: pytorch/xla
      - name: Extra CI deps
        if: inputs.has_code_changes == 'true' && matrix.run_triton_tests
        shell: bash
        run: |
          set -x
          pip install -U --pre jax jaxlib "jax-cuda12-plugin[with_cuda]" jax-cuda12-pjrt -f https://storage.googleapis.com/jax-releases/jax_nightly_releases.html
      - name: Install Triton
        if: inputs.has_code_changes == 'true'
        shell: bash
        run: |
          cd pytorch
          make triton
      - name: Python Tests
        if: inputs.has_code_changes == 'true' && matrix.run_python_tests
        shell: bash
        run: |
          set -xue
          PJRT_DEVICE=CUDA python pytorch/xla/test/test_operations.py -v
          PJRT_DEVICE=CUDA python pytorch/xla/test/dynamo/test_dynamo.py -v
      - name: Triton Tests
        if: inputs.has_code_changes == 'true' && matrix.run_triton_tests
        shell: bash
        run: |
          PJRT_DEVICE=CUDA TRITON_PTXAS_PATH=/usr/local/cuda-12.3/bin/ptxas python pytorch/xla/test/test_triton.py
      - name: Report no code changes
        if: inputs.has_code_changes == 'false'
        run: |
          echo "No code changes were detected that require running the full test suite."
